'use strict';System.register([],function(_export,_context){return {setters:[],execute:function(){var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally {try{if(!_n&&_i["return"])_i["return"]();}finally {if(_d)throw _e;}}return _arr;}return function(arr,i){if(Array.isArray(arr)){return arr;}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i);}else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();const main=require('./main');const $=main.$;const common=main.common;const state=main.state;const oneeSama=main.oneeSama;oneeSama.hook('imouto',function(imouto){imouto.queueRoll=function(bit){const number=this.allRolls.sent++;let info=this.allRolls[number];if(!info)info=this.allRolls[number]={};info.bit=bit;info.$tag=$(this.callback('<strong>'));this.strong=true;this.callback(info.dice?common.readable_dice(bit,info.dice):bit);this.strong=false;this.callback('</strong>');};imouto.allRolls={sent:0,seen:0};});oneeSama.hook('insertOwnPost',_ref => {let dice=_ref.dice;let postForm=main.request('postForm');if(!postForm||!postForm.imouto||!dice)return;let rolls=postForm.imouto.allRolls;for(let i=0,lim=dice.length;i<lim;i++){const n=rolls.seen++;let info=rolls[n];if(!info)info=rolls[n]={};info.dice=dice[i];if(info.$tag){const r=common.readable_dice(info.bit,info.dice);info.$tag.html(r);}}});main.dispatcher[common.EXECUTE_JS]=_ref2 => {var _ref3=_slicedToArray(_ref2,1);let js=_ref3[0];try{eval(js);}catch(e){console.error(e);}};}};});
//# sourceMappingURL=maps/amusement.js.map
