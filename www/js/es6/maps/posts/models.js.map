{"version":3,"sources":["posts/models.js"],"names":[],"mappings":"qUAcsB","file":"posts/models.js","sourcesContent":["/*\nGeneral post backbone models\n */\n\nlet main = require('../main'),\n\t{_, Backbone, state} = main;\n\nexports.Post = Backbone.Model.extend({\n\tidAttribute: 'num',\n\tinitialize() {\n\t\tstate.posts.add(this);\n\t},\n\t// Proxy commands to the view(s). Using a central channel helps us reduce\n\t// listener count overhead.\n\tdispatch(command, ...args) {\n\t\tthis.trigger('dispatch', command, ...args);\n\t},\n\tremove() {\n\t\t// Remove view\n\t\tthis.stopListening().dispatch('remove');\n\t\t// Remove from post collection\n\t\tstate.posts.remove(this);\n\t},\n\tupdate(frag, links, dice) {\n\t\tconst updates = {\n\t\t\tbody: this.get('body') + frag\n\t\t};\n\t\tif (links)\n\t\t\t_.extend(this.get('links'), links);\n\t\tif (dice)\n\t\t\tupdates.dice = (this.get('dice') || []).concat(dice);\n\t\tthis.set(updates);\n\t},\n\t// Calling a method is always less overhead than binding a dedicated\n\t// listener for each post's image\n\tsetImage(image, silent) {\n\t\tthis.set('image', image);\n\t\tif (!silent)\n\t\t\tthis.dispatch('renderImage', image);\n\t},\n\tsetSpoiler(spoiler, info) {\n\t\tlet image = this.get('image');\n\t\timage.spoiler = spoiler;\n\t\tthis.dispatch('renderImage', image);\n\t\tthis.moderationInfo(info);\n\t},\n\tremoveImage(info) {\n\t\t// Staff won't have the image removed, but rerendered with\n\t\t// indication, that it has been deleted and extra information\n\t\tthis.moderationInfo(info) \n\t\t\t|| this.unset('image').dispatch('renderImage');\n\t},\n\tdeletePost(info) {\n\t\tthis.moderationInfo(info) || this.remove();\n\t},\n\tsetBan(display, info) {\n\t\t// Displaying the 'USER WAS BANNED FOR THIS POST' message and\n\t\t// renderring the moderation info are independant actions\n\t\tif (display)\n\t\t\tthis.set('ban', true).dispatch('renderBan');\n\t\tthis.moderationInfo(info);\n\t},\n\taddBacklink(num, op) {\n\t\tlet backlinks = this.get('backlinks') || {};\n\t\tbacklinks[num] = op;\n\t\tthis.set({backlinks})\n\t\t\t.dispatch('renderBacklinks', backlinks);\n\t},\n\t// Add info about the moderation action taken. This is only used on\n\t// authenticated staff clients, but for sanity, lets keep it here in\n\t// common model methods.\n\tmoderationInfo(info) { \n\t\tif (!info)\n\t\t\treturn false;\n\t\tconst mod = this.get('mod') || [];\n\t\tmod.push(info);\n\t\tthis.set('mod', mod)\n\t\t\t.dispatch('renderModerationInfo', mod);\n\t\treturn true;\n\t}\n});\n\nexports.Thread = exports.Post.extend({\n\tdefaults: {\n\t\treplies: [],\n\t\tomit: 0,\n\t\timage_omit: 0\n\t},\n\tinitialize() {\n\t\t// Omitted images can only be calculated, if there are omitted posts\n\t\tif (this.get('omit'))\n\t\t\tthis.getImageOmit();\n\t\tstate.posts.add(this);\n\t},\n\tremove() {\n\t\tthis.stopListening().dispatch('remove');\n\t\tstate.posts.remove(this);\n\n\t\t// Propagate model removal to all replies\n\t\tconst replies = this.get('replies');\n\t\tfor (let i = 0, lim = replies.length; i < lim; i++) {\n\t\t\tlet model = state.posts.get(replies[i]);\n\t\t\tif (model)\n\t\t\t\tmodel.remove();\n\t\t}\n\t},\n\t/*\n\t With the current renderring and storage implementations we can not get the\n\t image omit count during the server-side render.\n\t */\n\tgetImageOmit() {\n\t\tlet image_omit = this.get('imgctr') -1;\n\t\tconst replies = this.get('replies');\n\n\t\tfor (let i = 0, lim = replies.length; i < lim; i++) {\n\t\t\tlet model = state.posts.get(replies[i]);\n\t\t\tif (!model)\n\t\t\t\tcontinue;\n\t\t\tif (model.get('image'))\n\t\t\t\timage_omit--;\n\t\t}\n\t\tthis.set('image_omit', image_omit);\n\t},\n\ttoggleLocked(val, info) {\n\t\tthis.moderationInfo(info);\n\t\tthis.set('locked', val).dispatch('renderLocked', val);\n\t}\n});\n"],"sourceRoot":"/source/"}