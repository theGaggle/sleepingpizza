'use strict';System.register([],function(_export,_context){return {setters:[],execute:function(){var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally {try{if(!_n&&_i["return"])_i["return"]();}finally {if(_d)throw _e;}}return _arr;}return function(arr,i){if(Array.isArray(arr)){return arr;}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i);}else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();const main=require('main');const util=require('./util');const $=main.$;const Backbone=main.Backbone;const common=main.common;const lang=main.lang;const modals=main.modals;const parseHTML=common.parseHTML;const InputBoxView=Backbone.View.extend({className:'mod inputBox',events:{submit:'submit'},initialize(){modals[this.type]=this;this.render();},render(){const html=parseHTML`<form>
				${ this.renderInput() }
				<input type="submit" value="${ lang.send }">
			</form>`;this.$el.html(html).prependTo(main.$toolbox.$el).find('input').first().focus();},submit(event){event.preventDefault();const values=[];$(event.target).find('input[type!=submit]').each(function(){values.push(this.type==='checkbox'?this.checked:this.value);});this.handler(values);},kill(){delete modals[this.type];this.remove();}});const NotificationInputView=InputBoxView.extend({type:'notification',renderInput(){return parseHTML`<input ${ {type:'text',size:25,placeholder:lang.mod.placeholders.msg} }>`;},handler(msg){main.send([common.NOTIFICATION,msg[0]]);this.kill();}});exports.notification=NotificationInputView;const BanInputView=InputBoxView.extend({type:'ban',renderInput(){let html='';for(let field of ['days','hours','minutes']){html+=parseHTML`<input ${ {type:'number',placeholder:lang.mod.placeholders[field]} }>`;}html+=parseHTML`<input ${ {type:'text',size:25,placeholder:lang.mod.placeholders.reason} }>`;var _lang$mod$displayBan=_slicedToArray(lang.mod.displayBan,2);const label=_lang$mod$displayBan[0];const title=_lang$mod$displayBan[1];html+=parseHTML`<label ${ {title} }>
				<input type="checkbox">
				${ label }
			</label>`;return html;},handler(info){if(!info[3])return this.renderReasonPrompt();for(let i=0;i<3;i++){info[i]=+info[i];}info[4]=+info[4];for(let num of util.getSelected()){main.send([common.BAN,num,...info]);}this.kill();},renderReasonPrompt(){this.$el.find('.reasonPrompt').remove();this.$el.append(parseHTML`<b class="reasonPrompt admin">
					${ lang.mod.needReason }
				</b>`).find('input[type=text]').focus();}});exports.ban=BanInputView;}};});
//# sourceMappingURL=../maps/mod/input.js.map
