'use strict';System.register([],function(_export,_context){return {setters:[],execute:function(){const main=require('./main');const _=main._;const util=main.util;const options=main.options;const state=main.state;const posts=main.posts;class Extract{constructor(catalog){const el=main.$threads[0];const json=JSON.parse(document.getElementById('postData').innerHTML);main.request('notify:title',json.title);if(catalog)return;const mine=this.mine=state.mine.readAll(),posts=this.posts=json.posts;this.extractReplies(el);this.extractThreads(el);state.addLinks(json.links);for(let post in posts){const links=posts[post].links;if(!links)continue;for(let num in links){if(num in mine)main.request('repliedToMe',posts[post].num);}}if(options.get('anonymise'))main.request('loop:anonymise');main.request('time:render');}extractReplies(el){let articles=el.getElementsByTagName('article');for(let i=0,l=articles.length;i<l;i++){let article=articles[i];new posts.Article({model:new posts.models.Post(this.extractModel(article)),el:article});}}extractThreads(el){let sections=el.getElementsByTagName('section');for(let i=0;i<sections.length;i++){let section=sections[i];const model=this.extractModel(section);new posts.Section({model:new posts.models.Thread(model),el:section}).renderOmit();state.syncs[model.num]=model.hctr;}}extractModel(el){let info=this.posts[util.getNum(el)];if(info.num in this.mine)info.mine=true;return info;}}module.exports=Extract;new Extract(state.page.get('catalog'));}};});
//# sourceMappingURL=maps/extract.js.map
