{"version":3,"sources":["mod/panels.js"],"names":["System","register","_export","_context","table","rows","func","html","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","row","value","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","cell","err","main","_","Backbone","common","dispatcher","etc","oneeSama","lang","modals","Memory","state","PanelView","ModLogView","AdminPanelView","RequestPanelView","setters","execute","require","View","extend","className","initialize","_this","this","$el","appendTo","$overlay","type","kind","msg","render","send","info","length","el","innerHTML","renderContents","postRender","scrollTop","scrollHeight","kill","remove","MOD_LOG","act","num","postRef","op","mod","formatLog","time","exports","log","id","ADMIN_PANEL","events","click .unban","_this2","banCount","ban","mnemonic","unban","event","target","UNBAN","getAttribute","parentElement","adminPanel","click .close","click #rescan","append","removed","scan","readAll","requests","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","posts","models","attributes","m","body","match","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","request","replace","trim","push","sortBy","safe","parseDOM","rescan","removeRequest","preventDefault","write","closest","djPanel"],"mappings":"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","file":"mod/panels.js","sourcesContent":["/*\nModeration log modal view\n */\n\nconst main = require('main'),\n\t{_, Backbone, common, dispatcher, etc, oneeSama, lang, modals, Memory,\n\t\tstate} = main\n\nconst PanelView = Backbone.View.extend({\n\tclassName: 'modal mod panel glass',\n\tinitialize() {\n\t\tthis.$el.appendTo(main.$overlay);\n\t\tmodals[this.type] = this;\n\n\t\t// Register websocket handler\n\t\tdispatcher[this.kind] = msg => this.render(msg[0]);\n\t\t// Send request\n\t\tmain.send([this.kind]);\n\t},\n\trender(info) {\n\t\tif (!info.length) {\n\t\t\treturn this.el.innerHTML = \"God's in his Heaven. All's right\"\n\t\t\t\t+ \" with the world.\";\n\t\t}\n\t\tthis.el.innerHTML = this.renderContents(info);\n\t\tthis.postRender && this.postRender()\n\n\t\t// Scroll to the end of the log\n\t\tthis.el.scrollTop = this.el.scrollHeight;\n\t\treturn this;\n\t},\n\tkill() {\n\t\tdelete dispatcher[this.kind];\n\t\tdelete modals[this.type];\n\t\tthis.remove();\n\t}\n});\n\nconst ModLogView = PanelView.extend({\n\ttype: 'log',\n\tkind: common.MOD_LOG,\n\trenderContents(info) {\n\t\treturn table(info, act => [\n\t\t\t// Unbans do not have a target post\n\t\t\tact.num ? oneeSama.postRef(act.num, act.op) : '',\n\t\t\tlang.mod.formatLog(act),\n\t\t\toneeSama.time(act.time)\n\t\t]);\n\t}\n});\nexports.log = ModLogView;\n\nconst AdminPanelView = PanelView.extend({\n\ttype: 'adminPanel',\n\tid: 'adminPanel',\n\tkind: common.ADMIN_PANEL,\n\tevents: {\n\t\t'click .unban': 'unban'\n\t},\n\trenderContents(info) {\n\t\tthis.banCount = 0;\n\t\treturn table(info, ban => {\n\t\t\tthis.banCount++;\n\t\t\treturn [\n\t\t\t\toneeSama.mnemonic(ban[0]),\n\t\t\t\toneeSama.time(ban[1]),\n\t\t\t\t`<a class=\"unban\" data-id=\"${ban[0]}\">${lang.mod.unban}</a>`\n\t\t\t];\n\t\t});\n\t},\n\tunban(event) {\n\t\tconst el = event.target;\n\t\tmain.send([common.UNBAN, el.getAttribute('data-id')]);\n\t\tel.parentElement.parentElement.remove();\n\n\t\t// Check if any bans left\n\t\tif (!--this.banCount)\n\t\t\tthis.kill();\n\t}\n});\nexports.adminPanel = AdminPanelView;\n\n/**\n * Construct a table from an array of items and a consumer funtion that returns\n * an array of column contents.\n */\nfunction table(rows, func) {\n\tlet html = '<table>';\n\tfor (let row of rows) {\n\t\thtml += '<tr>';\n\t\tfor (let cell of func(row)) {\n\t\t\thtml += `<td>${cell}</td>`;\n\t\t}\n\t\thtml += '</tr>';\n\t}\n\thtml += '</table>';\n\treturn html;\n}\n\nconst RequestPanelView = PanelView.extend({\n\ttype: 'djPanel',\n\tevents: {\n\t\t'click .close': 'removeRequest',\n\t\t'click #rescan': 'scan'\n\t},\n\n\t/**\n\t * Override parent method, because we don't query the server\n\t */\n\tinitialize() {\n\t\tmain.$overlay[0].append(this.el)\n\t\tmodals[this.type] = this;\n\t\tthis.removed = new Memory('request', 2)\n\t    this.scan()\n\t},\n\n\t/**\n\t * Scan thread for `/r/ song` strings, we have not removed yet\n\t */\n\tscan() {\n\t    const removed = this.removed.readAll(),\n\t\t\trequests = []\n\t\tfor (let {attributes} of state.posts.models) {\n\t\t\t// Post's request(s) already processed\n\t\t\tif (attributes.num in removed)\n\t\t\t\tcontinue\n\t\t    const m = attributes.body.match(/\\/r\\/[^\\n]+$/gm)\n\t\t\tif (!m)\n\t\t\t    continue\n\t\t\tfor (let request of m) {\n\t\t\t    request = request.replace('/r/', '').trim()\n\t\t\t\trequests.push([attributes.num, attributes.mnemonic, request])\n\t\t\t}\n\t\t}\n\t\treturn this.render(_.sortBy(requests, 1))\n\t},\n\n\t/**\n\t * Render the inner table\n\t */\n\trenderContents(requests) {\n\t\treturn table(requests, request => [\n\t\t\toneeSama.postRef(request[0], oneeSama.op).safe,\n\t\t\toneeSama.mnemonic(request[1]),\n\t\t\trequest[2],\n\t\t\t`<a class=\"close\" data-id=\"${request[0]}\">X</a>`\n\t\t])\n\t},\n\n\t/**\n\t * Extra rendering operations to perform that deviate from parent class\n\t */\n\tpostRender() {\n\t    this.el.append(etc.parseDOM(`<a id=\"rescan\">${lang.rescan}</a>`)[0])\n\t},\n\n\t/**\n\t * Remove a request from the list and persist removal to localStorage\n\t */\n\tremoveRequest(event) {\n\t\tevent.preventDefault()\n\t\tconst el = event.target\n\t\tthis.removed.write(el.getAttribute('data-id'))\n\t\tel.closest('tr').remove()\n\t}\n})\nexports.djPanel = RequestPanelView\n"],"sourceRoot":"/source/"}