{"version":3,"sources":["mod/toolbox.js"],"names":["System","register","_export","_context","_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_taggedTemplateLiteral","strings","raw","Object","freeze","defineProperties","value","_templateObject","_templateObject2","_templateObject3","main","input","panels","util","$","_","Backbone","common","lang","modals","parseHTML","childViews","ToolboxView","setters","execute","require","ban","log","adminPanel","notification","djPanel","View","extend","id","className","initialize","this","render","specs","ident","auth","accessLevels","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","level","checkAuth","forEach","right","push","err","controls","ln","mod","$controls","$checkboxToggle","appendTo","prop","$toggle","show","$el","prepend","$overlay","$mnemonicStyle","localStorage","noMnemonics","events","click #toolboxToggle","click .modButton","toggleButtons","hidden","model","get","text","toggle","set","buttonHandler","event","target","getAttribute","clearSelection","loopCheckboxes","el","checked","toggleMnemonics","hide","send","type","concat","getSelected","spoilerImages","deleteImages","toggleChild","kill","sendNotification","modLog","renderPanel","deletePosts","lockThreads","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","num","state","posts","$toolbox","Model"],"mappings":"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","file":"mod/toolbox.js","sourcesContent":["/*\nView containing controls of moderation actions\n */\n\nconst main = require('main'),\n\tinput = require('./input'),\n\tpanels = require('./panels'),\n\tutil = require('./util'),\n\t{$, _, Backbone, common, lang, modals} = main,\n\t{parseHTML} = common;\n\nconst childViews = {\n\tban: input.ban,\n\tlog: require('./panels').log,\n\tadminPanel: panels.adminPanel,\n\tnotification: input.notification,\n\tdjPanel: panels.djPanel\n};\n\nconst ToolboxView = Backbone.View.extend({\n\tid: 'toolbox',\n\tclassName: 'mod modal panel glass',\n\tinitialize() {\n\t\tthis.render();\n\t},\n\trender() {\n\t\tlet specs = this.specs = [\n\t\t\t'clearSelection',\n\t\t\t'spoilerImages',\n\t\t\t'deleteImages',\n\t\t\t'deletePosts',\n\t\t\t'modLog'\n\t\t];\n\n\t\t// Add aditional panel buttons by priveledge level\n\t\tif (main.ident.auth === 'dj')\n\t\t\tspecs = this.specs = ['djPanel']\n\t\tconst accessLevels = [\n\t\t\t['dj', ['toggleMnemonics']],\n\t\t\t['moderator', ['lockThreads', 'ban']],\n\t\t\t['admin', ['sendNotification', 'renderPanel']]\n\t\t]\n\t\tfor (let level of accessLevels) {\n\t\t\tif (!common.checkAuth(level[0], main.ident))\n\t\t\t\tbreak\n\t\t\tlevel[1].forEach(right => specs.push(right))\n\t\t}\n\n\t\tlet controls = '<span>';\n\t\tfor (let i = 0; i < specs.length; i++) {\n\t\t\tconst ln = lang.mod[specs[i]];\n\t\t\tcontrols += parseHTML\n\t\t\t\t`<a class=\"modButton\" data-kind=\"${i}\" title=\"${ln[1]}\">\n\t\t\t\t\t${ln[0]}\n\t\t\t\t</a>`;\n\t\t}\n\t\tcontrols += '</span>';\n\t\tthis.$controls = $(controls);\n\n\t\tthis.$checkboxToggle = $(parseHTML\n\t\t\t\t`<style>\n\t\t\t\t.postCheckbox {\n\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t}\n\t\t\t</style>`\n\t\t)\n\t\t\t.appendTo('head')\n\t\t\t// Disabled only works if the emelemnt is in the DOM\n\t\t\t.prop('disabled', true);\n\n\t\tthis.$toggle = $(`<a id=\"toolboxToggle\">${lang.show}</a>`);\n\t\tthis.$el.prepend(this.$controls, this.$toggle)\n\t\t\t.appendTo(main.$overlay);\n\n\t\t// Sets mnemonic visbility\n\t\tthis.$mnemonicStyle = $(parseHTML\n\t\t\t\t`<style>\n\t\t\t\theader > .mod.addr {\n\t\t\t\t\tdisplay: none;\n\t\t\t\t}\n\t\t\t</style>`\n\t\t)\n\t\t\t.appendTo('head')\n\t\t\t.prop('disabled', localStorage.noMnemonics !== 'true');\n\t\treturn this;\n\t},\n\tevents: {\n\t\t'click #toolboxToggle': 'toggleButtons',\n\t\t'click .modButton': 'buttonHandler'\n\t},\n\ttoggleButtons() {\n\t\tconst hidden = !this.model.get('shown');\n\t\tthis.$toggle.text(lang[hidden ? 'hide' : 'show']);\n\t\tthis.$controls.toggle(0);\n\t\tthis.$checkboxToggle.prop('disabled', !hidden);\n\t\tthis.model.set('shown', hidden);\n\t},\n\tbuttonHandler(event) {\n\t\tthis[this.specs[event.target.getAttribute('data-kind')]](event);\n\t},\n\tclearSelection() {\n\t\tutil.loopCheckboxes(el => el.checked = false);\n\t},\n\ttoggleMnemonics() {\n\t\tconst hide = localStorage.noMnemonics === 'true';\n\t\tthis.$mnemonicStyle.prop('disabled', hide);\n\t\tlocalStorage.noMnemonics = !hide;\n\t},\n\tsend(type) {\n\t\tmain.send([common[type], ...util.getSelected()]);\n\t},\n\tspoilerImages() {\n\t\tthis.send('SPOILER_IMAGES');\n\t},\n\tdeleteImages() {\n\t\tthis.send('DELETE_IMAGES');\n\t},\n\ttoggleChild(type) {\n\t\tif(modals[type])\n\t\t\tmodals[type].kill();\n\t\telse\n\t\t\tnew childViews[type];\n\t},\n\t// Push a notification message to all clients\n\tsendNotification() {\n\t\tthis.toggleChild('notification');\n\t},\n\tmodLog() {\n\t\tthis.toggleChild('log');\n\t},\n\tdjPanel() {\n\t    this.toggleChild('djPanel')\n\t},\n\tban() {\n\t\tthis.toggleChild('ban');\n\t},\n\trenderPanel() {\n\t\tthis.toggleChild('adminPanel');\n\t},\n\tdeletePosts() {\n\t\tthis.send('DELETE_POSTS');\n\t},\n\tlockThreads() {\n\t\tfor (let num of util.getSelected()) {\n\t\t\tconst model = main.state.posts.get(num);\n\t\t\t// Model exists and is an OP\n\t\t\tif (!model || model.get('op'))\n\t\t\t\tcontinue;\n\t\t\tmain.send([\n\t\t\t\tcommon[!model.get('locked') ? 'LOCK_THREAD' : 'UNLOCK_THREAD'],\n\t\t\t\tnum\n\t\t\t]);\n\t\t}\n\t}\n});\n\nmain.$toolbox = new ToolboxView({\n\tmodel: new Backbone.Model()\n});\n"],"sourceRoot":"/source/"}