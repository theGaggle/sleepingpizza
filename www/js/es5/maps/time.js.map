{"version":3,"sources":["time.js"],"names":["System","register","_export","_context","batcTimeRender","source","rtime","arguments","length","undefined","options","get","state","posts","each","model","dispatch","renderTimer","clearTimeout","setTimeout","timer_from_el","el","serverTimeOffset","classList","add","start","getAttribute","end","maxh","common","pad","maxm","maxs","moumouikkai","document","body","contains","now","serverTime","textContent","main","lang","finished","countdown","Math","round","request","diff","hour","floor","min","sec","mouikkai","setInterval","els","getElementsByTagName","i","$","Backbone","oneeSama","setters","execute","require","dispatcher","GET_TIME","msg","Date","reply","on","defer","handler","seconds","this","removeAttribute","style","cursor","removeEventListener","render","innerHTML","readableUTCTime","getElementById","firstChild","addEventListener"],"mappings":"AAAA,YAAaA,QAAOC,YAAY,SAASC,EAAQC,GAAyF,QAASC,GAAeC,GAAQ,GAkB1IC,GAAAC,UAAAC,QAAA,GAAAC,SAAAF,UAAA,GAAQG,EAAQC,IAAI,gBAAZJ,UAAA,EAAAK,GAAAC,MAAAC,KAAA,SAAAC,GAAA,MAAAA,GAAAC,SAAA,gBAAAC,GAAAC,aAAAD,GAAAX,IAAAW,EAAAE,WAAAf,EAAA,MAAA,QAAAgB,GAAAC,GAAA,GAAAC,EAAA,CAAAD,EAAAE,UAAAC,IAAA,eAAA,IAAAC,GAAAJ,EAAAK,aAAA,SAAAC,EAAAN,EAAAK,aAAA,OAAAE,EAAAC,EAAAC,IAAAT,EAAAK,aAAA,SAAAK,EAAAF,EAAAC,IAAAT,EAAAK,aAAA,QAAAM,EAAAH,EAAAC,IAAAT,EAAAK,aAAA,SAAA,QAAAO,KAAA,GAAAC,SAAAC,KAAAC,SAAAf,GAAA,CAAA,GAAAgB,GAAAR,EAAAS,YAAA,IAAAD,EAAAV,EAAA,MAAAN,GAAAkB,YAAAC,EAAAC,KAAAC,QAAA,IAAAjB,EAAAY,EAAA,CAAA,GAAAM,GAAAC,KAAAC,OAAApB,EAAAY,GAAA,IAAA,OAAA,MAAAM,GAAAH,EAAAM,QAAA,kBAAAzB,EAAAkB,YAAA,cAAAI,EAAAxB,WAAAc,EAAA,KAAA,GAAAc,GAAAV,EAAAZ,EAAAuB,EAAAJ,KAAAK,MAAAF,EAAA,IAAA,GAAA,GAAAA,IAAA,IAAAC,EAAA,GAAA,EAAA,IAAAE,GAAAN,KAAAK,MAAAF,EAAA,IAAA,GAAAA,IAAA,IAAAG,EAAA,EAAA,IAAAC,GAAAP,KAAAK,MAAAF,EAAA,IAAA,OAAA1B,GAAAkB,YAAAV,EAAAC,IAAAkB,GAAA,IAAAnB,EAAAC,IAAAoB,GAAA,IAAArB,EAAAC,IAAAqB,GAAA,MAAAvB,EAAA,IAAAG,EAAA,IAAAC,EAAAb,WAAAc,EAAA,UAAA,QAAAmB,KAAAC,YAAA,WAAA,IAAA,GAAAC,GAAApB,SAAAqB,qBAAA,aAAAC,EAAA,EAAAA,EAAAF,EAAA9C,OAAAgD,IAAAF,EAAAE,GAAAjC,UAAAa,SAAA,iBAAAhB,EAAAkC,EAAAE,KAAA,KAlBmB,GAAIhB,GAAKiB,EAAEC,EAAS7B,EAAO8B,EAASjD,EAAQE,EAAMU,EAAiBL,CAkBtF,QAAA2C,WAAAC,QAAA,WAAArB,EAAAsB,QAAA,UAAAL,EAAAjB,EAAAiB,EAAAC,EAAAlB,EAAAkB,SAAA7B,EAAAW,EAAAX,OAAA8B,EAAAnB,EAAAmB,SAAAjD,EAAA8B,EAAA9B,QAAAE,EAAA4B,EAAA5B,MAAAU,EAAA,EAAAkB,EAAAuB,WAAAlC,EAAAmC,UAAA,SAAAC,GAAAA,EAAA,KAAA3C,EAAA2C,EAAA,GAAAC,KAAA7B,QAAAG,EAAA2B,MAAA,cAAA,WAAA,MAAA7C,KAAAL,EAAAR,OAAA+B,EAAA2B,MAAA,cAAA/D,GAAAM,EAAA0D,GAAA,sBAAAhE,GAAAoC,EAAA6B,MAAAjE,GAAAiE,MAAAjB,GAAAiB,MAAA,WAAA,QAAAC,KAAAC,GAAA,EAAAC,KAAAC,gBAAA,SAAAD,KAAAE,MAAAC,OAAA,UAAAH,KAAAI,oBAAA,QAAAN,GAAAO,IAAA,QAAAA,KAAA,MAAAvD,IAAAD,EAAAyD,UAAAnB,EAAAoB,gBAAA,GAAAb,MAAArC,EAAAS,cAAAiC,OAAApD,YAAA0D,EAAAN,EAAA,IAAA,MAAApD,WAAA0D,EAAA,KAAA,GAAAN,GAAA9D,OAAAY,EAAAa,SAAA8C,eAAA,YAAAC,UAAA5D,GAAA6D,iBAAA,QAAAZ,GAAAO","file":"time.js","sourcesContent":["/*\nTimezone corrections, batch timestamp updates, syncwatch, util.\n */\n\nlet main = require('./main'),\n\t{$, Backbone, common, oneeSama, options, state} = main;\n\n// Get a more accurate server-client time offset, for interclient syncing\n// Does not account for latency, but good enough for our purposes\nvar serverTimeOffset = 0;\nmain.dispatcher[common.GET_TIME] = function(msg){\n\tif (!msg[0])\n\t\treturn;\n\tserverTimeOffset = msg[0] - Date.now();\n};\nmain.reply('time:offset', () => serverTimeOffset);\n\nlet renderTimer;\nfunction batcTimeRender(source, rtime = options.get('relativeTime')) {\n\tstate.posts.each(model => model.dispatch('renderTime'));\n\tif (renderTimer)\n\t\tclearTimeout(renderTimer);\n\tif (rtime)\n\t\trenderTimer = setTimeout(batcTimeRender, 60000)\n}\nmain.reply('time:render', batcTimeRender);\noptions.on('change:relativeTime', batcTimeRender);\n\n/* syncwatch */\nfunction timer_from_el(el) {\n\tif (!serverTimeOffset)\n\t\treturn;\n\tel.classList.add('timerTicking');\n\tconst start = el.getAttribute('start'),\n\t\tend = el.getAttribute('end'),\n\t\tmaxh = common.pad(el.getAttribute('hour')),\n\t\tmaxm = common.pad(el.getAttribute('min')),\n\t\tmaxs = common.pad(el.getAttribute('sec'));\n\n\t(function moumouikkai() {\n\t\t// Prevent memory leak\n\t\tif (!document.body.contains(el))\n\t\t\treturn;\n\t\tconst now = common.serverTime();\n\t\tif (now > end)\n\t\t\treturn el.textContent = main.lang.finished;\n\n\t\t// If the start time is in the future\n\t\tif (start > now) {\n\t\t\tconst countdown = Math.round((start - now) / 1000);\n\t\t\tif(countdown === 10)\n\t\t\t\tmain.request('time:syncwatch');\n\t\t\tel.textContent = 'Countdown: ' + countdown;\n\t\t\treturn setTimeout(moumouikkai, 1000);\n\t\t}\n\n\t\tlet diff = now - start;\n\t\tconst hour = Math.floor(diff / 1000 /60 / 60);\n\t\tdiff -= hour * 1000 * 60 * 60;\n\t\tconst min = Math.floor( diff / 1000 / 60);\n\t\tdiff -= min * 1000 * 60;\n\t\tconst sec = Math.floor(diff / 1000);\n\t\tel.textContent = common.pad(hour) + \":\" + common.pad(min) + \":\"\n\t\t\t+ common.pad(sec) + \" / \" + maxh + \":\" + maxm + \":\" + maxs;\n\t\treturn setTimeout(moumouikkai, 1000);\n\t})();\n}\n\nfunction mouikkai() {\n\tsetInterval(function() {\n\t\tconst els = document.getElementsByTagName('syncwatch');\n\t\tfor (let i = 0; i < els.length; i++) {\n\t\t\tif (els[i].classList.contains('timerTicking'))\n\t\t\t\tcontinue;\n\t\t\ttimer_from_el(els[i]);\n\t\t}\n\t}, 1000);\n}\n\nmain.defer(batcTimeRender)\n\t.defer(mouikkai)\n\t.defer(function() {\n\t\t// Append UTC clock to the top of the schedule\n\t\tlet seconds;\n\t\tlet el = document.getElementById('UTCClock').firstChild;\n\t\tel.addEventListener('click', handler);\n\n\t\tfunction handler() {\n\t\t\tseconds = true;\n\t\t\tthis.removeAttribute('title');\n\t\t\tthis.style.cursor = 'default';\n\t\t\tthis.removeEventListener('click', handler);\n\t\t\trender();\n\t\t}\n\n\t\tfunction render() {\n\t\t\tif (!serverTimeOffset)\n\t\t\t\treturn setTimeout(render, 1000);\n\t\t\tel.innerHTML = oneeSama\n\t\t\t\t.readableUTCTime(new Date(common.serverTime()), seconds);\n\t\t\tsetTimeout(render, seconds ? 1000 : 60000);\n\t\t}\n\n\t\trender();\n\t});\n"],"sourceRoot":"/source/"}