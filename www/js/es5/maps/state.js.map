{"version":3,"sources":["state.js"],"names":["System","register","_export","_context","extend","Memory","randomID","getID","Model","Collection","initial","page","syncs","ownPosts","config","configHash","isMobile","$thread","$name","$email","$banner","mine","posts","setters","_underscore","_memory","_util","_model","_collection","execute","read","href","state","board","match","thread","lastN","_arr","_i","length","key","val","parseInt","clear","$threads","innerHTML","models","each","model","dispatch","reset","exports","events","request","getModel","el","id","get","location","tabID","window","document","query"],"mappings":"AAAA,YAAaA,QAAOC,UAAU,aAAa,WAAW,SAAS,UAAU,gBAAgB,SAASC,EAAQC,GAAU,GAAIC,GAAOC,EAAOC,EAASC,EAAMC,EAAMC,EAAWC,EAAQC,EAAKC,EAAMC,EAASC,EAAOC,EAAWC,EAASC,EAAQC,EAAMC,EAAOC,EAAQC,EAAKC,CAAM,QAAQC,SAAS,SAASC,GAAapB,EAAOoB,EAAYpB,QAAS,SAASqB,GAASpB,EAAOoB,EAAAA,YAAkB,SAASC,GAAOpB,EAASoB,EAAMpB,SAASC,EAAMmB,EAAMnB,OAAQ,SAASoB,GAAQnB,EAAMmB,EAAAA,YAAiB,SAASC,GAAanB,EAAWmB,EAAAA,aAAuBC,QAAQ,WAAW,QAASC,GAAKC,GAAqL,IAAI,GAA/KC,IAAOC,MAAMF,EAAKG,MAAM,uBAAuB,GAAGC,OAAOJ,EAAKG,MAAM,sCAAsCE,MAAML,EAAKG,MAAM,oBAAwBG,GAAM,SAAS,SAAiBC,EAAG,EAAEA,EAAGD,EAAKE,OAAOD,IAkB3tB,CAAhC,GAAIE,GAAAH,EAAAC,GACFG,EAAMT,EAAMQ,EADkBR,GAE9BQ,GAAOC,EAAMC,SAASD,EAAI,IAAM,EAFF,MAAAT,GAAA,QAAAW,KAAAC,SAAAC,UAAA,GAAAC,OAAAC,KAAA,SAAAC,GAAA,MAAAA,GAAAC,SAAA,mBAAA3B,EAAA4B,QAAAC,QAAAvC,SAAAwC,OAAAC,QAAA,sBAAA,QAAAC,GAAAC,GAAA,GAAAC,GAAAjD,EAAAgD,EAAA,OAAAC,GAAAlC,EAAAmC,IAAAD,GAAA,KAAAtD,EAAA,OAAA4B,GAAApB,EAAAoB,EAAA4B,SAAA3B,MAAArB,EAAAiD,MAAArD,EAAA,IAAAJ,EAAA,OAAAS,EAAA,GAAAH,GAAAE,IAAAR,EAAA,OAAAS,GAAAT,EAAA,QAAAU,MAAAV,EAAA,QAAAU,GAAAV,EAAA,WAAAW,MAAAX,EAAA,WAAAW,GAAAX,EAAA,SAAAY,EAAA8C,OAAA9C,QAAAZ,EAAA,SAAAY,GAAAZ,EAAA,aAAAa,EAAA6C,OAAA7C,YAAAb,EAAA,aAAAa,GAAAb,EAAA,WAAAc,EAAA4C,OAAA5C,UAAAd,EAAA,WAAAc,GAAAd,EAAA,UAAAe,EAAA4C,SAAAC,MAAA,YAAA5D,EAAA,UAAAe,GAAAf,EAAA,QAAAgB,EAAA2C,SAAAC,MAAA,UAAA5D,EAAA,QAAAgB,GAAAhB,EAAA,SAAAiB,EAAA0C,SAAAC,MAAA,WAAA5D,EAAA,SAAAiB,GAAAjB,EAAA,UAAAkB,EAAAyC,SAAAC,MAAA,YAAA5D,EAAA,UAAAkB,GAAAlB,EAAA,OAAAmB,EAAA,GAAAhB,GAAA,OAAA,IAAAH,EAAA,OAAAmB,GAAAnB,EAAA,QAAAoB,EAAA,GAAAb,IAAAP,EAAA,QAAAoB,GAAApB,EAAA,QAAAyC,GAAAzC,EAAA,WAAAoD","file":"state.js","sourcesContent":["/*\n * Central model keeping the state of the page\n */\n\nimport {extend} from 'underscore'\nimport Memory from './memory'\nimport {randomID, getID} from './util'\nimport Model from './model'\nimport Collection from './collection'\n\n// Read page state by parsing a URL\nexport function read(href) {\n\tconst state = {\n\t\tboard: href.match(/\\/([a-zA-Z0-9]+?)\\//)[1],\n\t\tthread: href.match(/\\/(\\d+)(:?#\\d+)?(?:[\\?&]\\w+=\\w+)*$/),\n\t\t// Displayed last N posts setting on thread pages\n\t\tlastN: href.match(/[\\?&]last=(\\d+)/)\n\t}\n\tfor (let key of ['thread', 'lastN']) {\n\t\tconst val = state[key]\n\t\tstate[key] = val ? parseInt(val[1]) : 0\n\t}\n\treturn state\n}\n\n// Initial page state\nconst initial = read(location.href)\ninitial.tabID = randomID(32)\nexport let page = new Model(initial)\n\n// Hot-reloadable configuration\n\n// TODO: We need actual listeners to this model for hot reloads\n\n// Tracks the synchronisation counter of each thread\nexport let syncs = {}\n\n// Posts I made in this tab\nexport const ownPosts = {}\n\n// Configuration object, passed from the server\nexport const config = window.config\n\n// Hash of the the configuration object\nexport const configHash = window.configHash\n\n// Indicates, if in mobile mode. Determined server-side.\nexport const isMobile = window.isMobile\n\n// Cached DOM elements\nexport const $thread = document.query('threads')\nexport const $name = document.query('#name')\nexport const $email = document.query('#email')\nexport const $banner = document.query('#banner')\n\n// Remember which posts are mine for two days\nexport const mine = new Memory('mine', 2)\n\n// All posts currently displayed\nexport const posts = new Collection()\n\n// Clear the current post state and HTML\nexport function clear() {\n\t/*\n\t * Emptying the whole element should be faster than removing each post\n\t * individually through models and listeners\n\t */\n\t$threads.innerHTML = ''\n\n\t// The <threads> tag has already been emptied, no need to perform\n\t// element removal with the default `.remove()` method\n\tmodels.each(model =>\n\t\tmodel.dispatch('stopListening'))\n\n\tposts.reset()\n\n\t// Prevent old threads from syncing\n\texports.syncs = {}\n\tevents.request('massExpander:unset')\n}\n\n// Retrieve model of closest parent post\nexport function getModel(el) {\n\tconst id = getID(el)\n\tif (!id) {\n\t\treturn null\n\t}\n\treturn posts.get(id)\n}\n"],"sourceRoot":"/source/"}