{"version":3,"sources":["posts/section.js"],"names":["System","register","_export","_context","main","PostCommon","$","_","Backbone","util","oneeSama","state","setters","execute","require","module","exports","extend","tagName","render","attrs","this","model","attributes","setElement","section","insertIntoDOM","reply","parseDOM","replyBox","num","ownPosts","request","style","display","el","append","nextElementSibling","remove","$threads","query","after","document","createElement","fun","renderLocked","locked","classList","stopListening","shiftReplies","postForm","replies","lim","hotConfig","get","changed","undefined","len","slice","length","i","post","posts","shift","image_omit","omit","renderOmit","arguments","_state$page$attribute","page","thread","href","innerHTML","lang","abbrev_msg","split","bumpThread"],"mappings":"AAAA,YAAaA,QAAOC,YAAY,SAASC,EAAQC,GAAU,GAAIC,GAAKC,EAAWC,EAAEC,EAAEC,EAASC,EAAKC,EAASC,CAAM,QAAQC,WAAWC,QAAQ,WAAWT,EAAKU,QAAQ,WAAWT,EAAWS,QAAQ,YAAYR,EAAEF,EAAKE,EAAEC,EAAEH,EAAKG,EAAEC,EAASJ,EAAKI,SAASC,EAAKL,EAAKK,KAAKC,EAASN,EAAKM,SAASC,EAAMP,EAAKO,MAAMI,OAAOC,QAAQX,EAAWY,QAAQC,QAAQ,UAAUC,OAAO,WAAkB,GAAIC,GAAMC,KAAKC,MAAMC,UAAWF,MAAKG,WAAWd,EAASe,QAAQL,IAAQM,eAAgB,IAAIC,GAAMlB,EAAKmB,SAASlB,EAASmB,WAA4J,QAA7IT,EAAMU,MAAOnB,GAAMoB,UAAY3B,EAAK4B,QAAQ,eAAYL,EAAMM,MAAMC,QAAQ,QAAOb,KAAKc,GAAGC,OAAOT,GAAON,KAAKc,GAAGE,mBAAmBC,SAAgBjB,MAAOK,cAAc,WAAyBtB,EAAKmC,SAAS,GAAGC,MAAM,SAASC,MAAMpB,KAAKc,GAAGO,SAASC,cAAc,OAAOtB,KAAKuB,OAAQC,aAAa,SAAsBC,GAAQzB,KAAKc,GAAGY,UAAUD,EAAO,MAAM,UAAU,WAAYR,OAAO,WAA4F,MAA1EjB,MAAKc,GAAGE,mBAAmBC,SAASjB,KAAKc,GAAGG,SAASjB,KAAK2B,gBAAuB3B,MAAO4B,aAAa,SAAsBC,GAAU,GAAI9B,GAAMC,KAAKC,MAAMC,WAAe4B,EAAQ/B,EAAM+B,QAAYC,EAAIzC,EAAM0C,UAAUC,IAAI,uBAAuBC,EAAQC,MAAaN,IAASE,GAAqC,KAAI,GAA/BK,GAAIN,EAAQO,QAAQC,OAAeC,EAAEH,EAAIG,EAAER,EAAIQ,IAAI,CAAC,GAAIC,GAAKlD,EAAMmD,MAAMR,IAAIH,EAAQY,QAAaF,KAAiBA,EAAKP,IAAI,UAASlC,EAAM4C,aAAa5C,EAAM6C,OAAOV,GAAQ,EAAKM,EAAKvB,UAAaiB,GAAQlC,KAAK6C,WAAW9C,EAAM6C,KAAK7C,EAAM4C,aAAcE,WAAW,WAAsB,GAkEj8CD,GAAAE,UAAAR,QAAA,GAAAH,SAAAW,UAAA,GAAO9C,KAAKC,MAAMgC,IAAI,QAAfa,UAAA,EACjBA,WAAAR,QAAA,GAAAH,SAAAW,UAAA,GAAa9C,KAAKC,MAAMgC,IAAI,cAAfa,UAAA,EAAA,IAAA,IAAAF,EAAA,CAAA,GAAAG,GAAAzD,EAAA0D,KAAA9C,WAAA+C,EAAAF,EAAAE,OAAAC,EAAAH,EAAAG,IAAAlD,MAAAc,GAAAK,MAAA,SAAAgC,UAAA9D,EAAA+D,KAAAC,WAAAT,EAAA5C,KAAAC,MAAAgC,IAAA,cAAAgB,GAAAC,EAAAI,MAAA,KAAA,MAAAC,WAAA,WAAAvD,KAAAc,GAAAE,mBAAAC,SAAAjB,KAAAc,GAAAG,SAAAjB,KAAAK","file":"posts/section.js","sourcesContent":["/*\n * OP and thread related logic\n */\n\nconst main = require('../main'),\n\tPostCommon = require('./common'),\n\t{$, _, Backbone, util, oneeSama, state} = main;\n\nmodule.exports = PostCommon.extend({\n\ttagName: 'section',\n\trender() {\n\t\tconst attrs = this.model.attributes;\n\t\tthis.setElement(oneeSama.section(attrs)).insertIntoDOM();\n\n\t\t// Insert reply box into the new thread\n\t\tconst reply = util.parseDOM(oneeSama.replyBox());\n\t\tif (attrs.num in state.ownPosts || !!main.request('postForm'))\n\t\t\treply.style.display = 'none';\n\t\tthis.el.append(reply);\n\n\t\t// Remove next <hr>\n\t\tthis.el.nextElementSibling.remove();\n\t\treturn this;\n\t},\n\tinsertIntoDOM() {\n\t\tmain.$threads[0].query('aside')\n\t\t\t.after(this.el, document.createElement('hr'));\n\t\tthis.fun();\n\t},\n\trenderLocked(locked) {\n\t\tthis.el.classList[locked ? 'add' : 'remove']('locked');\n\t},\n\tremove() {\n\t\t// Remove next <hr>\n\t\tthis.el.nextElementSibling.remove();\n\t\tthis.el.remove();\n\t\tthis.stopListening();\n\t\treturn this;\n\t},\n\t/*\n\t Remove the top reply on board pages, if over limit, when a new reply is\n\t added\n\t */\n\tshiftReplies(postForm) {\n\t\tconst attrs = this.model.attributes,\n\t\t\t{replies} = attrs;\n\t\tlet lim = state.hotConfig.get('ABBREVIATED_REPLIES'),\n\t\t\tchanged;\n\t\tif (postForm)\n\t\t\tlim--;\n\t\t// Need a static length, because the original array get's modified\n\t\tconst len = replies.slice().length;\n\t\tfor (let i = len; i > lim; i--) {\n\t\t\tconst post = state.posts.get(replies.shift());\n\t\t\tif (!post)\n\t\t\t\tcontinue;\n\t\t\tif (post.get('image'))\n\t\t\t\tattrs.image_omit++;\n\t\t\tattrs.omit++;\n\t\t\tchanged = true;\n\t\t\tpost.remove();\n\t\t}\n\t\tif (changed)\n\t\t\tthis.renderOmit(attrs.omit, attrs.image_omit)\n\t},\n\t// Posts and images omited indicator\n\trenderOmit(omit = this.model.get('omit'),\n\t\timage_omit = this.model.get('image_omit')\n\t) {\n\t\tif (omit === 0)\n\t\t\treturn;\n\t\tconst {thread, href} = state.page.attributes;\n\t\tthis.el.query('.omit').innerHTML = oneeSama.lang.abbrev_msg(omit,\n\t\t\tthis.model.get('image_omit'), thread && href.split('?')[0]);\n\t},\n\t// Move thread to the top of the page\n\tbumpThread() {\n\t\tthis.el.nextElementSibling.remove();\n\t\tthis.el.remove();\n\t\tthis.insertIntoDOM();\n\t}\n});\n"],"sourceRoot":"/source/"}