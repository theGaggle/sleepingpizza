{"version":3,"sources":["posts/render/etc.js"],"names":["System","register","_export","_context","_taggedTemplateLiteral","strings","raw","Object","freeze","defineProperties","value","postAnchor","href","text","parseHTML","_templateObject","page","mine","lang","setters","_state","_lang","execute","renderPostLink","num","board","op","get","you","thread","OP","renerBanned","mod","banMessage","renderModInfo","info","html","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","action","formatLog","err","renderBacklinks","links","_ref2"],"mappings":"AAAA,YAAaA,QAAOC,UAAU,cAAc,QAAQ,SAASC,EAAQC,GAA6C,QAASC,GAAuBC,EAAQC,GAAK,MAAOC,QAAOC,OAAOD,OAAOE,iBAAiBJ,GAASC,KAAKI,MAAMH,OAAOC,OAAOF,OAAU,QAASK,GAAWC,EAAKC,GAAM,MAAOC,WAAUC,EAAgBH,EAAKC,GAA9O,GAAIG,GAAKC,EAAKC,EAAKH,CAAkO,QAAQI,SAAS,SAASC,GAAQJ,EAAKI,EAAOJ,KAAKC,EAAKG,EAAOH,MAAO,SAASI,GAAOH,EAAKG,EAAAA,aAAiBC,QAAQ,WAAmK,QAASC,GAAeC,EAAIC,EAAMC,GAAI,GAAIb,GAAK,IAAQY,KAAQT,EAAKW,IAAI,WAAUd,GAAM,KAAKY,EAAM,KAAKZ,GAAMW,EAAOP,EAAKU,IAAIH,KAAMX,GAAM,IAAIK,EAAKU,IAAK,IAAIC,GAAOb,EAAKW,IAAI,SAA8E,OAAjED,KAAKG,EAAQhB,GAAM,KAAcW,GAAKK,IAAQhB,GAAM,IAAIK,EAAKY,IAAWnB,EAAW,IAAIc,EAAM,IAAIC,EAAG,IAAIF,EAAIX,GAAgD,QAASkB,KAAc,MAAO,+BAA+Bb,EAAKc,IAAIC,WAAW,OAA2C,QAASC,GAAcC,GAAM,GAAIC,GAAK,2BAA+BC,GAA0B,EAASC,GAAkB,EAAUC,EAAeC,MAAU,KAAI,IAAI,GAsC7rCC,GAtCisCC,EAsCjsCP,EAAAQ,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAA,CAAA,GAAAU,GAAAN,EAAA/B,KAAA0B,IAAAlB,EAAAc,IAAAgB,UAAAD,GAAA,QAAA,MAAAE,GAAAX,GAAA,EAAAC,EAAAU,EAAA,QAAA,KAAAZ,GAAAK,EAAAA,WAAAA,EAAAA,YAAA,QAAA,GAAAJ,EAAA,KAAAC,IAAA,MAAAH,IAAA,OAAA,QAAAc,GAAAC,GAAA,IAAAA,EAAA,MAAA,EAAA,IAAAf,GAAA,EAAA,KAAA,GAAAgB,KAAAD,GAAA,CAAA,GAAA1B,GAAA2B,EAAA3B,MAAAC,EAAA0B,EAAA1B,EAAAU,KAAAA,GAAA,KAAAA,GAAAb,EAAA4B,EAAA3B,KAAAC,EAAAC,GAAA,MAAAU,GAtC+arB,EAAgBX,GAAwB,4BAA4B,UAAa,aAAe,4BAA4B,UAAa,aAA2TF,EAAQ,iBAAiBqB,GAAyGrB,EAAQ,cAAc6B,GAsC3gC7B,EAAA,gBAAAgC,GAAAhC,EAAA,kBAAAgD","file":"posts/render/etc.js","sourcesContent":["import {page, mine} from '../../state'\nimport lang from 'lang'\n\n// Render a link to other posts\nexport function renderPostLink(num, board, op) {\n\tlet text = '>>'\n\tif (board !== page.get('board')) { // Cross-board\n\t\ttext += `>/${board}/`\n\t}\n\ttext += num\n\tif (mine.get(num)) { // Post, I made\n\t\ttext += ' ' + lang.you\n\t}\n\tconst thread = page.get('thread')\n\tif (op !== thread) { // Cross-thread\n\t\ttext += ' \\u27a1'\n\t} else if (num == thread) { // OP post of this thread\n\t\ttext += ' ' + lang.OP\n\t}\n\treturn postAnchor(`/${board}/${op}#${num}`, text)\n}\n\n// Render the anchor element of a post link\nfunction postAnchor(href, text) {\n\treturn parseHTML\n\t\t`<a class=\"history\" href=\"${href}\">\n\t\t\t${text}\n\t\t</a>`\n}\n\n// Render USER WAS BANNED FOR THIS POST message, or similar\nexport function renerBanned() {\n\treturn `<b class=\"admin banMessage\">${lang.mod.banMessage}</b>`\n}\n\n// Render moderation information. Only exposed to authenticated staff.\nexport function renderModInfo(info) {\n\tlet html = '<b class=\"modLog admin\">'\n\tfor (let action of info) {\n\t\thtml += `${lang.mod.formatLog(action)}<br>`\n\t}\n\thtml += '</b>'\n\treturn html\n}\n\n// Render links to posts that are linking to the target post\nexport function renderBacklinks(links) {\n\tif (!links) {\n\t\treturn ''\n\t}\n\tlet html = ''\n\tfor (let {board, op} in links) {\n\t\tif (html) {\n\t\t\thtml += ' '\n\t\t}\n\t\thtml += renderPostLink(links[num], board, op)\n\t}\n\treturn html\n}\n"],"sourceRoot":"/source/"}