{"version":3,"sources":["posts/posting.js"],"names":["System","register","_export","_context","_taggedTemplateLiteral","strings","raw","Object","freeze","defineProperties","value","handle_shortcut","event","prevent","stopImmediatePropagation","preventDefault","altKey","opts","options","attributes","which","aside","document","query","postSM","feed","togglespoiler","postForm","onToggle","done","$submit","attr","finish","textSpoiler","postState","this","imouto","state2","spoiler","sp","$input","val","expandAll","imager","massExpander","toggle","workMode","main","oneeSama","Cookie","set","banner","querySelector","style","display","getElementById","setAttribute","config","MEDIA_URL","state","hotConfig","get","cssHash","thumbStyle","trigger","window","addEventListener","openPostBox","num","_templateObject","Article","embed","ident","$","_","Backbone","common","connSM","util","lang","postModel","inputMinSize","ComposerModel","ArticleComposer","ComposerView","setters","execute","require","undefined","reply","renderIdentity","screen","width","Model","extend","idAttribute","on","feeder","act","el","classList","remove","$threads","find","hide","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","queryAll","Symbol","iterator","next","err","op","section","closest","getNum","createElement","page","posts","dispatch","model","destination","preflight","matches","msg","onAllocation","dispatcher","IMAGE_STATUS","$doc","parentNode","hook","_ref","links","$buffer","each","$a","text","m","match","$ref","join","postRef","refText","events","click #cancel","change #imageInput","input #trans","keydown #trans","click #done","click #toggle","initialize","args","prototype","call","listenTo","change","renderButtons","change:spoiler","renderSpoilerPane","render","insertIntoDOM","nextSpoiler","pending","line_count","char_count","OneeSama","callback","inject","blockqoute","eLinkify","tamashii","desc","mine","readAll","you","setModel","attrs","input","name","id","rows","class","autocomplete","isMobile","form","method","enctype","target","cancel","type","imageInput","accept","innerHTML","parseHTML","els","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","parsed","parse_name","$name","$email","haveTrip","textContent","tetxContent","anon","parseDOM","forEach","after","email","trim","add","removeAttribute","_ref2","before","resizeInput","fun","sizer","size","INPUT_ROOM","Math","max","getBoundingClientRect","left","_model$attributes","uploading","uploaded","uploadStatus","sentAllocRequest","allocWait","submit","disabled","marginLeft","background","backgroundImage","View","S_BOL","touchable_spoiler_tag","_ref3","setElement","isThread","$lineBuffer","$meta","$subject","maxlength","SUBJECT_MAX_LENGTH","$blockquote","$sizer","appendTo","append","$el","subject","$uploadForm","renderUploadForm","focus","$b","$tag","children","first","href","removeAttr","d","prop","css","margin-left","$cancel","$imageInput","$uploadStatus","html","$toggle","$form","click","proxy","WEBM","$iframe","src","uploadError","cancelled","onImageChosen","extra","prepareUpload","k","uploadURL","load","doc","contentWindow","contentDocument","error","test","length","unknownUpload","e","setTimeout","uploadFallbackMessage","notifyUploading","a","stat","unknownResult","offset","onInput","embedRewrite","rw","old","newVal","substr","index","changed","start","diff","end","Event","time","video","selectionStart","selectionEnd","youtube_url_re","findTimeArg","youtube_short_re","soundcloud_url_re","sc","pastebin_re","pbin","nl","lastIndexOf","ok","commit","split","reverse","lim","setSelectionRange","MAX_POST_CHARS","params","indexOf","i","len","pair","youtube_time_re","lines","breach","MAX_POST_LINES","pop","send","INSERT_POST","allocationMessage","o","fragment","createTextNode","normalize","image","opt","key","nonce","request","onKeyDown","_this","follow","slice","bind","_this2","flushPending","replaceWith","contents","padding-left","FINISH_POST","preserve","replyBox","missing","allRolls","sent","seen","_checkAgain","n","pick","pick_spoiler","ownPosts","header","addClass","insertUploaded","siblings","andSelf","show","onbeforeunload","info","renderImage","$img","arg","t","onImageAllocation","INSERT_IMAGE","addReference","sel","stopListening","Hidamari","autoExpandImage","exports","data","isInside","gsel","parentElement","post","getSelection","toString"],"mappings":"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","file":"posts/posting.js","sourcesContent":["/*\n * Evertything related to writing and commiting posts\n */\n\nconst Article = require('./article'),\n\tmain = require('../main'),\n\tembed = require('./embed'),\n\tident = require('./identity'),\n\timager = require('./imager'),\n\t{$, _, Backbone, Cookie, common, config, connSM, util, lang, oneeSama,\n\t\toptions, postSM, state} = main;\n\nlet postForm, postModel;\n/*\n The variable gets overwritten, so a simple refference will not do. Calling a\n fucntion to retrieve the var each time solves the problem.\n */\nmain.reply('postForm', () => postForm)\n\t.reply('postModel', () => postModel)\n\t.reply('postForm:indentity', () => postForm && postForm.renderIdentity());\n\n// Minimal size of the input buffer\nlet\tinputMinSize = 300;\n// For mobile\nif (window.screen && screen.width <= 320)\n\tinputMinSize = 50;\n\nconst ComposerModel = Backbone.Model.extend({idAttribute: 'num'});\n\n// Synchronyse postform state with websocket connectivity\nconnSM.on('synced', postSM.feeder('sync'));\nconnSM.on('dropped', postSM.feeder('desync'));\nconnSM.on('desynced', postSM.feeder('desync'));\n\n// Allow remotely altering posting FSM state\nmain.reply('postSM:feed', state => postSM.feed(state));\n\npostSM.act('* + desync -> none', () => {\n\t// TODO: Desync logic\n\tif (postForm) {\n\t\tpostForm.el.classList.remove('editing');\n\t\tpostForm.$input.val('');\n\t\tpostForm.finish();\n\t}\n\tmain.$threads.find('aside.posting').hide();\n});\n\npostSM.act('none + sync, draft, alloc + done -> ready', () => {\n\t// TODO: Add unfinished post checking\n\n\tif (postForm) {\n\t\tpostForm.remove();\n\t\tpostForm = postModel = null;\n\t}\n\tfor (let el of main.$threads[0].queryAll('aside.posting')) {\n\t\tel.style.display = '';\n\t}\n});\n\n// Make new postform\npostSM.act('ready + new -> draft', aside => {\n\tlet op,\n\t\tsection = aside.closest('section');\n\tif (section)\n\t\top = util.getNum(section);\n\telse\n\t\tsection = document.createElement('section');\n\n\t// Shift OP's replies on board pages\n\tif (op && !state.page.get('thread'))\n\t\tstate.posts.get(op).dispatch('shiftReplies', true);\n\n\tpostForm = new ComposerView({\n\t\tmodel: postModel = new ComposerModel({op}),\n\t\tdestination: aside,\n\t\tsection\n\t});\n});\n\npostSM.preflight('draft', aside => aside.matches('aside'));\n\npostSM.act('draft + alloc -> alloc', msg => postForm.onAllocation(msg));\n\n// Render image upload status messages\nmain.dispatcher[common.IMAGE_STATUS] = msg =>\n\tpostForm && postForm.dispatch(msg[0]);\n\nmain.$doc.on('click', 'aside.posting a', function () {\n\tpostSM.feed('new', this.parentNode);\n});\n\nmain.$doc.on('keydown', handle_shortcut);\n\nfunction handle_shortcut(event) {\n\tif (!event.altKey)\n\t\treturn;\n\n\tconst opts = options.attributes;\n\tswitch(event.which) {\n\t\tcase opts.new:\n\t\t\tconst aside = document.query('aside.posting');\n\t\t\tif (aside) {\n\t\t\t\tpostSM.feed('new', aside);\n\t\t\t\tprevent();\n\t\t\t}\n\t\t\tbreak;\n\t\tcase opts.togglespoiler:\n\t\t\tif (postForm) {\n\t\t\t\tpostForm.onToggle(event);\n\t\t\t\tprevent();\n\t\t\t}\n\t\t\tbreak;\n\t\tcase opts.done:\n\t\t\tif (postForm && !postForm.$submit.attr('disabled')) {\n\t\t\t\tpostForm.finish();\n\t\t\t\tprevent();\n\t\t\t}\n\t\t\tbreak;\n\t\t// Insert text spoiler\n\t\tcase opts.textSpoiler:\n\t\t\tif (postForm) {\n\t\t\t\tvar postState = this.imouto.state2.spoiler;\n\t\t\t\t// Was spoiler already started?\n\t\t\t\tvar sp = (postState ? '[/' : ' [') + 'spoiler]';\n\t\t\t\tthis.imouto.state2.spoiler = !postState;\n\t\t\t\tthis.$input.val(this.$input.val() + sp);\n\t\t\t\tprevent();\n\t\t\t}\n\t\t\tbreak;\n\t\tcase opts.expandAll:\n\t\t\timager.massExpander.toggle();\n\t\t\tprevent();\n\t\t\tbreak;\n\t\tcase opts.workMode:\n\t\t\tconst val = main.oneeSama.workMode = !main.oneeSama.workMode;\n\t\t\tCookie.set('workModeTOG', val);\n\t\t\tconst banner = document.querySelector(\"h1 > img\");\n\t\t\tif(banner!=null)\n\t\t\t\tbanner.style.display =  val? 'none':'';\n\t\t\tdocument.getElementById('theme').setAttribute('href',\n\t\t\t\t\t`${config.MEDIA_URL}css/${val? state.hotConfig.get('DEFAULT_CSS'): main.options.get(\"theme\")}.css?v=${main.cssHash}`);\n\t\t\toneeSama.thumbStyle = val? 'hide': main.options.get('thumbs');\n\t\t\tmain.options.trigger(\"workModeTOG\");\n\t\t\twindow.addEventListener('beforeunload', function () {\n\t\t\t\tCookie.set(\"workModeTOG\",false);\n\t\t\t});\n\t\t\tprevent()\n\t\t\tbreak;\n\t}\n\n\tfunction prevent() {\n\t\tevent.stopImmediatePropagation();\n\t\tevent.preventDefault();\n\t}\n}\n\n// TODO: Unify self-updates with OneeSama; this is redundant\nmain.oneeSama.hook('insertOwnPost', ({links}) => {\n\tif (!postForm || !links)\n\t\treturn;\n\tpostForm.$buffer.find('.nope').each(function () {\n\t\tvar $a = $(this);\n\t\tconst text = $a.text(),\n\t\t\tm = text.match(/^>>(\\d+)/);\n\t\tif (!m)\n\t\t\treturn;\n\t\tconst num = m[1],\n\t\t\top = links[num];\n\t\tif (!op)\n\t\t\treturn;\n\t\tlet $ref = $(common.join([postForm.imouto.postRef(num, op, false)]));\n\t\t$a.attr('href', $ref.attr('href')).attr('class', 'history');\n\t\tconst refText = $ref.text();\n\t\tif (refText != text)\n\t\t\t$a.text(refText);\n\t});\n});\n\nconst ArticleComposer = Article.extend({\n\tevents: {\n\t\t'click #cancel': 'cancel',\n\t\t'change #imageInput': 'onImageChosen',\n\t\t'input #trans': 'onInput',\n\t\t'keydown #trans': 'onKeyDown',\n\t\t'click #done': 'finish',\n\t\t'click #toggle': 'onToggle'\n\t},\n\tinitialize(args) {\n\t\t// super() call\n\t\tArticle.prototype.initialize.call(this);\n\t\tthis.listenTo(this.model, {\n\t\t\t'change': this.renderButtons,\n\t\t\t'change:spoiler': this.renderSpoilerPane\n\t\t});\n\t\tthis.render(args).insertIntoDOM(args);\n\t\tthis.model.set({\n\t\t\tspoiler: 0,\n\t\t\tnextSpoiler: -1\n\t\t});\n\n\t\tthis.pending = '';\n\t\tthis.line_count = 1;\n\t\tthis.char_count = 0;\n\n\t\t// Initialize the form's private rendering singleton instance\n\t\tconst imouto = this.imouto = new common.OneeSama({\n\t\t\tcallback: inject,\n\t\t\top: state.page.get('thread'),\n\t\t\tblockqoute: this.blockqoute,\n\t\t\teLinkify: main.oneeSama.eLinkify,\n\t\t\tlang: main.lang,\n\t\t\ttamashii(num) {\n\t\t\t\tlet section = document.query('#p' + num);\n\t\t\t\tsection = section && section.closest('section');\n\t\t\t\tif (section) {\n\t\t\t\t\tconst desc = num in state.mine.readAll() && lang.you;\n\t\t\t\t\treturn this.postRef(num, util.getNum(section), desc);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\treturn `<a class=\"nope\">&gt;&gt;${num}</a>`;\n\t\t\t}\n\t\t});\n\t\timouto.setModel(this.model);\n\t},\n\t// Initial render\n\trender() {\n\t\t// Define attributes separatly for readbility\n\t\tconst attrs = {\n\t\t\tinput: {\n\t\t\t\tname: 'body',\n\t\t\t\tid: 'input',\n\t\t\t\trows: 1,\n\t\t\t\tclass: 'themed exclude',\n\t\t\t\tautocomplete: main.isMobile\n\t\t\t},\n\t\t\tform: {\n\t\t\t\tmethod: 'post',\n\t\t\t\tenctype: 'multipart/form-data',\n\t\t\t\ttarget: 'upload',\n\t\t\t\tid: 'uploadForm'\n\t\t\t},\n\t\t\tcancel: {\n\t\t\t\ttype: 'buttom',\n\t\t\t\tvalue: lang.cancel,\n\t\t\t\tid: 'cancel'\n\t\t\t},\n\t\t\timageInput: {\n\t\t\t\ttype:'file',\n\t\t\t\tid: 'imageInput',\n\t\t\t\tname: 'image',\n\t\t\t\taccept: 'image/*;.webm;.pdf;.mp3'\n\t\t\t},\n\t\t\ttoggle: {\n\t\t\t\ttype: 'button',\n\t\t\t\tid: 'toggle'\n\t\t\t}\n\t\t};\n\n\t\tthis.el.innerHTML = parseHTML\n\t\t\t`<header>\n\t\t\t\t<a class=\"name nope\" target=\"_blank\">\n\t\t\t\t\t<b></b>\n\t\t\t\t</a>\n\t\t\t</header>\n\t\t\t<span class=\"oi control\" data-glyph=\"chevron-bottom\"></span>\n\t\t\t<div class=\"container\">\n\t\t\t\t<blockquote>\n\t\t\t\t\t<p id=\"buffer\" class=\"exclude\"></p>\n\t\t\t\t\t<p id=\"lineBuffer\" class=\"exclude\"></p>\n\t\t\t\t\t<textarea ${attrs.input}></textarea>\n\t\t\t\t</blockquote>\n\t\t\t\t<form ${attrs.form}>\n\t\t\t\t\t<input ${attrs.cancel}>\n\t\t\t\t\t<input ${attrs.imageInput}>\n\t\t\t\t\t<input ${attrs.toggle}>\n\t\t\t\t\t<strong id=\"uploadStatus\"></strong>\n\t\t\t\t</form>\n\t\t\t\t<small></small>\n\t\t\t</div>`;\n\n\t\t// Cache elements to avoid lookup\n\t\tconst els = ['buffer', 'lineBuffer', 'input', 'uploadForm', 'cancel',\n\t\t\t'imageInput', 'toggle', 'uploadStatus', 'hiddenUpload', 'sizer'];\n\t\tfor (let el of els) {\n\t\t\tthis[el] = document.query('#' + el);\n\t\t}\n\t\tthis.renderIdentity();\n\t\treturn this;\n\t},\n\t// Name, emaail and tripcode field\n\trenderIdentity() {\n\t\t// Model has already been alocated and has a proper identity rendered\n\t\tif (this.model.get('num'))\n\t\t\treturn;\n\t\tconst parsed = common.parse_name(main.$name.val(), main.$email.val()),\n\t\t\thaveTrip = !!(parsed[1] || parsed[2]);\n\t\tconst el = this.el.query('.name'),\n\t\t\tname = el.query('a');\n\t\tif (parsed[0])\n\t\t\tname.textContent = parsed[0] + ' ';\n\t\telse\n\t\t\tname.tetxContent = haveTrip ? '' : lang.anon;\n\t\tif (haveTrip)\n\t\t\tutil.parseDOM(' <code>!?</code>').forEach(el => name.after(el));\n\n\t\t// Insert staff title\n\t\tmain.oneeSama.trigger('fillMyName', name);\n\t\tconst email = main.$email.val().trim();\n\t\tif (email) {\n\t\t\tel.setAttribute('href', 'mailto:' + email);\n\t\t\tel.classList.remove('nope');\n\t\t\tel.classList.add('email');\n\t\t}\n\t\telse {\n\t\t\tel.removeAttribute('href');\n\t\t\tel.classList.add('nope');\n\t\t\tel.classList.remove('email');\n\t\t}\n\t},\n\tinsertIntoDOM({destination}) {\n\t\tdestination.before(this.el);\n\t\tthis.resizeInput();\n\t\tmain.$threads.queryAll('aside.postsing').forEach(el =>\n\t\t\tel.style.display = 'none');\n\t\tthis.fun();\n\t},\n\t/*\n\t Allows keeping the input buffer sized as if the text was monospace,\n\t without actually displaying monospace font. Keeps the input buffer from\n\t shifting around needlessly.\n\t */\n\tresizeInput(val) {\n\t\tconst {sizer, input} = this;\n\t\tif (typeof val !== 'string')\n\t\t\tval = input.value;\n\t\tsizer.textContent = val;\n\t\tlet size = sizer.width + common.INPUT_ROOM;\n\t\tsize = Math.max(size, inputMinSize\n\t\t\t- input.getBoundingClientRect().left\n\t\t\t- this.el.getBoundingClientRect().left);\n\t\tthis.input.style.width = size + 'px';\n\t},\n\trenderButtons() {\n\t\tconst {num, uploading, uploaded, uploadStatus, sentAllocRequest}\n\t\t\t= this.model.attributes;\n\t\tconst allocWait = sentAllocRequest && !num;\n\t\tthis.submit.disabled = !!(uploading || allocWait);\n\t\tif (uploaded)\n\t\t\tthis.submit.style.marginLeft = 0;\n\t\tthis.cancel.disabled = !!allocWait;\n\t\tthis.cancel.style.display = (!num || uploading) ? '' : 'none';\n\t\tthis.imageInput.disabled = !!uploading;\n\t\tthis.uploadStatus.innerHTML = uploadStatus;\n\t},\n\trenderSpoilerPane(model, spoiler) {\n\t\tconst background = spoiler\n\t\t\t? `${config.MEDIA_URL}spoil/spoil${spoiler}.png`\n\t\t\t: config.MEDIA_URL + 'css/ui/pane.png';\n\t\tthis.toggle.style.backgroundImage = `url(\"${background}\")`;\n\t}\n});\n\nconst ComposerView = Backbone.View.extend({\n\tevents: {\n\t\t'input #trans': 'onInput',\n\t\t'keydown #trans': 'onKeyDown',\n\t\t'click #done': 'finish',\n\t\t'click #toggle': 'onToggle'\n\t},\n\tinitialize(args) {\n\t\tthis.listenTo(this.model, {\n\t\t\t'change': this.renderButtons,\n\t\t\t'change:spoiler': this.renderSpoilerPane\n\t\t});\n\n\t\tthis.render(args);\n\n\t\tthis.pending = '';\n\t\tthis.line_count = 1;\n\t\tthis.char_count = 0;\n\n\t\t// Initialize the form's private rendering singleton instance\n\t\tlet imouto = this.imouto = new common.OneeSama({\n\t\t\tcallback: inject,\n\t\t\top: state.page.get('thread'),\n\t\t\tstate: [common.S_BOL, 0],\n\n\t\t\t// TODO: Convert current OneeSama.state array to more flexible\n\t\t\t// object\n\t\t\tstate2: {spoiler: 0},\n\t\t\t$buffer: this.$buffer,\n\t\t\teLinkify: main.oneeSama.eLinkify,\n\t\t\tlang: main.lang,\n\t\t\ttamashii(num) {\n\t\t\t\tlet section = document.query('#p' + num);\n\t\t\t\tsection = section && section.closest('section');\n\t\t\t\tif (section) {\n\t\t\t\t\tconst desc = num in state.mine.readAll() && this.lang.you;\n\t\t\t\t\treturn this.postRef(num, util.getNum(section), desc);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\treturn `<a class=\"nope\">&gt;&gt;${num}</a>`;\n\t\t\t}\n\t\t});\n\t\timouto.hook('spoilerTag', util.touchable_spoiler_tag);\n\t\tmain.oneeSama.trigger('imouto', imouto);\n\t},\n\t// Initial render\n\trender({destination, section}) {\n\t\tconst op = this.model.get('op');\n\t\tthis.setElement((op ? document.createElement('article') : section));\n\n\t\t// A defined op means the post is a reply, not a new thread\n\t\tthis.isThread = !op;\n\n\t\tthis.$buffer = $('<p/>');\n\t\tthis.$lineBuffer = $('<p/>');\n\t\tthis.$meta = $('<header><a class=\"nope\"><b/></a> <time/></header>');\n\t\tthis.$input = $('<textarea/>', {\n\t\t\tname: 'body',\n\t\t\tid: 'trans',\n\t\t\trows: '1',\n\t\t\tclass: 'themed',\n\t\t\tautocomplete: main.isMobile\n\t\t});\n\t\tthis.$submit = $('<input/>', {\n\t\t\tid: 'done',\n\t\t\ttype: 'button',\n\t\t\tvalue: main.lang.done\n\t\t});\n\t\tthis.$subject = $('<input/>', {\n\t\t\tid: 'subject',\n\t\t\tclass: 'themed',\n\t\t\tmaxlength: state.hotConfig.SUBJECT_MAX_LENGTH,\n\t\t\twidth: '80%'\n\t\t});\n\t\tthis.$blockquote = $('<blockquote/>');\n\n\t\t/*\n\t\t Allows keeping the input buffer sized as if the text was monospace,\n\t\t without actually displaying monospace font. Keeps the input buffer from\n\t\t shifting around needlessly.\n\t\t */\n\t\tthis.$sizer = $('<pre/>').appendTo('body');\n\n\t\tthis.$blockquote.append(this.$buffer, this.$lineBuffer, this.$input);\n\t\tthis.$el.append(this.$meta, this.$blockquote, '<small/>');\n\t\tif (this.isThread) {\n\t\t\tthis.$el.append(`<label for=\"subject\">${lang.subject}: </label>`,\n\t\t\t\tthis.$subject);\n\t\t\tthis.$blockquote.hide();\n\t\t}\n\t\tthis.$uploadForm = this.renderUploadForm();\n\t\tthis.$el.append(this.$uploadForm);\n\n\t\t// Add a menu to the postform\n\t\tmain.oneeSama.trigger('draft', this.$el);\n\t\tthis.renderIdentity();\n\n\t\t// Insert into the DOM\n\t\tdestination.style.display = 'none';\n\t\tif (this.isThread) {\n\t\t\tdestination.after(this.el);\n\t\t\tthis.el.after(document.createElement('hr'));\n\t\t\tthis.$subject.focus();\n\t\t}\n\t\telse {\n\t\t\tdestination.before(this.el);\n\t\t\tthis.resizeInput();\n\t\t\tthis.$input.focus();\n\t\t}\n\n\t\tmain.$threads.find('aside.posting').hide();\n\t\tthis.fun();\n\t},\n\t// Render the name, email, and admin title, if any\n\trenderIdentity() {\n\t\t// Model has already been alocated and has a proper identity rendered\n\t\tif (this.model.get('num'))\n\t\t\treturn;\n\t\tconst parsed = common.parse_name(main.$name.val(), main.$email.val()),\n\t\t\thaveTrip = !!(parsed[1] || parsed[2]);\n\t\tlet $b = this.$meta.find('b');\n\t\tif (parsed[0])\n\t\t\t$b.text(parsed[0] + ' ');\n\t\telse\n\t\t\t$b.text(haveTrip ? '' : main.lang.anon);\n\t\tif (haveTrip)\n\t\t\t$b.append(' <code>!?</code>');\n\t\t\n\t\t// Insert staff title\n\t\tmain.oneeSama.trigger('fillMyName', $b);\n\t\tconst email = main.$email.val().trim();\n\t\tlet $tag = this.$meta.children('a').first();\n\t\tif (email) {\n\t\t\t$tag.attr({\n\t\t\t\thref: 'mailto:' + email,\n\t\t\t\ttarget: '_blank',\n\t\t\t\tclass: 'email'\n\t\t\t});\n\t\t}\n\t\telse\n\t\t\t$tag.removeAttr('href').removeAttr('target').attr('class', 'nope');\n\t},\n\trenderButtons() {\n\t\tconst attrs = this.model.attributes,\n\t\t\tallocWait = attrs.sentAllocRequest && !attrs.num,\n\t\t\td = attrs.uploading || allocWait;\n\t\t// Beware of undefined!\n\t\tthis.$submit.prop('disabled', !!d);\n\t\tif (attrs.uploaded)\n\t\t\tthis.$submit.css({'margin-left': '0'});\n\t\tthis.$cancel.prop('disabled', !!allocWait);\n\t\tthis.$cancel.toggle(!!(!attrs.num || attrs.uploading));\n\t\tthis.$imageInput.prop('disabled', !!attrs.uploading);\n\t\tthis.$uploadStatus.html(attrs.uploadStatus);\n\t},\n\trenderSpoilerPane(model, sp) {\n\t\tconst background = sp ? `${config.MEDIA_URL}spoil/spoil${sp}.png`\n\t\t\t: config.MEDIA_URL + 'css/ui/pane.png';\n\t\tthis.$toggle.css('background-image', `url(\"${background}\")`);\n\t},\n\trenderUploadForm() {\n\t\tvar $form = $('<form method=\"post\" enctype=\"multipart/form-data\" '\n\t\t\t+ 'target=\"upload\"></form>');\n\t\tthis.$cancel = $('<input/>', {\n\t\t\ttype: 'button',\n\t\t\tvalue: lang.cancel,\n\t\t\tclick: $.proxy(this, 'cancel')\n\t\t});\n\t\tthis.$imageInput = $('<input/>', {\n\t\t\ttype: 'file',\n\t\t\tid: 'image',\n\t\t\tname: 'image',\n\t\t\taccept: config.WEBM ? 'imager/*;.webm' : 'image/*',\n\t\t\tchange: $.proxy(this, 'onImageChosen')\n\t\t});\n\t\tthis.$toggle = $('<input/>', {\n\t\t\ttype: 'button',\n\t\t\tid: 'toggle'\n\t\t});\n\t\tthis.$uploadStatus = $('<strong/>');\n\t\t$form.append(this.$cancel,\n\t\t\tthis.$imageInput,\n\t\t\tthis.$toggle, ' ',\n\t\t\tthis.$uploadStatus);\n\t\tthis.$iframe = $('<iframe/>', {\n\t\t\tsrc: '',\n\t\t\tname: 'upload',\n\t\t\tid: 'hidden-upload'\n\t\t}).appendTo('body');\n\t\tthis.model.set({\n\t\t\tspoiler: 0,\n\t\t\tnextSpoiler: -1\n\t\t});\n\t\treturn $form;\n\t},\n\t// Cancel file upload\n\tcancel() {\n\t\tif (this.model.get('uploading')) {\n\t\t\tthis.$iframe.remove();\n\t\t\tthis.$iframe = $('<iframe></iframe>', {\n\t\t\t\tsrc: '',\n\t\t\t\tname: 'upload',\n\t\t\t\tid: 'hidden-upload'\n\t\t\t}).appendTo('body');\n\t\t\tthis.uploadError('');\n\t\t\tthis.model.set({cancelled: true});\n\t\t}\n\t\telse\n\t\t\tthis.finish();\n\t},\n\tonImageChosen() {\n\t\tif (this.model.get('uploading') || this.model.get('uploaded'))\n\t\t\treturn;\n\t\tif (!this.$imageInput.val()) {\n\t\t\tthis.model.set('uploadStatus', '');\n\t\t\treturn;\n\t\t}\n\t\tconst extra = this.prepareUpload();\n\t\tfor (var k in extra) {\n\t\t\t$('<input type=hidden>')\n\t\t\t\t.attr('name', k)\n\t\t\t\t.val(extra[k])\n\t\t\t\t.appendTo(this.$uploadForm);\n\t\t}\n\t\tthis.$uploadForm.prop('action', util.uploadURL());\n\t\tthis.$uploadForm.submit();\n\t\tthis.$iframe.load(function() {\n\t\t\tif (!postForm)\n\t\t\t\treturn;\n\t\t\tvar doc = this.contentWindow || this.contentDocument;\n\t\t\tif (!doc)\n\t\t\t\treturn;\n\t\t\ttry {\n\t\t\t\tvar error = $(doc.document || doc).text();\n\t\t\t\t/*\n\t\t\t\t if it's a real response, it'll postMessage to us, so we don't have\n\t\t\t\t to do anything.\n\t\t\t\t */\n\t\t\t\tif (/legitimate imager response/.test(error))\n\t\t\t\t\treturn;\n\t\t\t\t// sanity check for weird browser responses\n\t\t\t\tif (error.length < 5 || error.length > 100)\n\t\t\t\t\terror = lang.unknownUpload;\n\t\t\t\tpostForm.uploadError(error);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\t/*\n\t\t\t\t likely cross-origin restriction\n\t\t\t\t wait before erroring in case the message shows up\n\t\t\t\t */\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tpostForm.uploadFallbackMessage();\n\t\t\t\t}, 500);\n\t\t\t}\n\t\t});\n\t\tthis.notifyUploading();\n\t},\n\tprepareUpload() {\n\t\tthis.model.set('uploadStatus', lang.uploading);\n\t\tthis.$input.focus();\n\t\tconst attrs = this.model.attributes;\n\t\treturn {spoiler: attrs.spoiler, op: attrs.op || 0};\n\t},\n\t/*\n\t this is just a fallback message for when we can't tell, if there was an\n\t error due to cross-origin restrictions\n\t */\n\tuploadFallbackMessage() {\n\t\tvar a = this.model.attributes,\n\t\t\tstat = a.uploadStatus;\n\t\tif (!a.cancelled && a.uploading && (!stat || stat == lang.uploading))\n\t\t\tthis.model.set('uploadStatus', lang.unknownResult);\n\t},\n\tnotifyUploading() {\n\t\tthis.model.set({uploading: true, cancelled: false});\n\t\tthis.$input.focus();\n\t},\n\tresizeInput(val) {\n\t\tif (typeof val !== 'string')\n\t\t\tval = this.$input.val();\n\t\tthis.$sizer.text(val);\n\t\tvar size = this.$sizer.width() + common.INPUT_ROOM;\n\t\tsize = Math.max(size, inputMinSize\n\t\t\t- this.$input.offset().left - this.$el.offset().left);\n\t\tthis.$input.css('width', size + 'px');\n\t},\n\tonInput(val) {\n\t\tif (val === undefined || val instanceof $.Event)\n\t\t\tval = this.$input.val();\n\t\tvar start = this.$input[0].selectionStart,\n\t\t\tend = this.$input[0].selectionEnd;\n\n\t\tvar changed = false,\n\t\t\tm, time, video;\n\n\t\t// Turn YouTube links into proper refs\n\t\twhile(true) {\n\t\t\tm = val.match(embed.youtube_url_re);\n\t\t\tif (!m)\n\t\t\t\tbreak;\n\t\t\t// Substitute\n\t\t\ttime = this.findTimeArg(m[3])\n\t\t\t\t|| this.findTimeArg(m[1])\n\t\t\t\t|| m[4]\n\t\t\t\t|| '';\n\t\t\tvideo = '>>>/watch?v=' + m[2] + time;\n\t\t\tval = embedRewrite(m, video);\n\t\t}\n\n\t\t//Youtu.be links\n\t\twhile(true) {\n\t\t\tm = val.match(embed.youtube_short_re);\n\t\t\tif (!m)\n\t\t\t\tbreak;\n\t\t\t// Substitute\n\t\t\ttime = this.findTimeArg(m[2]) || '';\n\t\t\tvideo = '>>>/watch?v=' + m[1] + time;\n\t\t\tval = embedRewrite(m, video);\n\t\t}\n\n\t\t// SoundCloud links\n\t\twhile(true) {\n\t\t\tm = val.match(embed.soundcloud_url_re);\n\t\t\tif (!m)\n\t\t\t\tbreak;\n\t\t\tvar sc = '>>>/soundcloud/' + m[1];\n\t\t\tval = embedRewrite(m, sc);\n\t\t}\n\n\t\t// Pastebin links\n\t\twhile(true) {\n\t\t\tm = val.match(embed.pastebin_re);\n\t\t\tif (!m)\n\t\t\t\tbreak;\n\t\t\tvar pbin = '>>>/pastebin/' + m[1];\n\t\t\tval = embedRewrite(m, pbin);\n\t\t}\n\n\t\t// Rewite embedable URLs to native embed URL syntax\n\t\tfunction embedRewrite(m, rw) {\n\t\t\tvar old = m[0].length;\n\t\t\tvar newVal = val.substr(0, m.index) + rw + val.substr(m.index + old);\n\t\t\tchanged = true;\n\t\t\tif (m.index < start) {\n\t\t\t\tvar diff = old - rw.length;\n\t\t\t\tstart -= diff;\n\t\t\t\tend -= diff;\n\t\t\t}\n\t\t\treturn newVal;\n\t\t}\n\n\t\tif (changed)\n\t\t\tthis.$input.val(val);\n\n\t\tvar nl = val.lastIndexOf('\\n');\n\t\tif (nl >= 0) {\n\t\t\tvar ok = val.substr(0, nl);\n\t\t\tval = val.substr(nl + 1);\n\t\t\tthis.$input.val(val);\n\t\t\tif (this.model.get('sentAllocRequest') || /[^ ]/.test(ok))\n\t\t\t\tthis.commit(ok + '\\n');\n\t\t}\n\t\telse {\n\t\t\tm = val\n\t\t\t\t.split('')\n\t\t\t\t.reverse()\n\t\t\t\t.join('')\n\t\t\t\t.match(/^(\\s*\\S+\\s+\\S+)\\s+(?=\\S)/);\n\t\t\tif (m) {\n\t\t\t\tvar lim = val.length - m[1].length;\n\t\t\t\tthis.commit(val.substr(0, lim));\n\t\t\t\tval = val.substr(lim);\n\t\t\t\tstart -= lim;\n\t\t\t\tend -= lim;\n\t\t\t\tthis.$input.val(val);\n\t\t\t\tthis.$input[0].setSelectionRange(start, end);\n\t\t\t}\n\t\t}\n\n\t\tthis.$input.attr('maxlength', common.MAX_POST_CHARS - this.char_count);\n\t\tthis.resizeInput(val);\n\t},\n\tfindTimeArg(params) {\n\t\tif (!params || params.indexOf('t=') < 0)\n\t\t\treturn false;\n\t\tparams = params.split('&');\n\t\tfor (let i = 0, len = params.length; i < len; i++) {\n\t\t\tlet pair = '#p' + params[i];\n\t\t\tif (embed.youtube_time_re.test(pair))\n\t\t\t\treturn pair;\n\t\t}\n\t\treturn false;\n\t},\n\t// Commit any staged words to the server\n\tcommit(text) {\n\t\tvar lines;\n\t\tif (text.indexOf('\\n') >= 0) {\n\t\t\tlines = text.split('\\n');\n\t\t\tthis.line_count += lines.length - 1;\n\t\t\tconst breach = this.line_count - common.MAX_POST_LINES + 1;\n\t\t\tif (breach > 0) {\n\t\t\t\tfor (var i = 0; i < breach; i++)\n\t\t\t\t\tlines.pop();\n\t\t\t\ttext = lines.join('\\n');\n\t\t\t\tthis.line_count = common.MAX_POST_LINES;\n\t\t\t}\n\t\t}\n\t\tconst left = common.MAX_POST_CHARS - this.char_count;\n\t\tif (left < text.length)\n\t\t\ttext = text.substr(0, left);\n\t\tif (!text)\n\t\t\treturn;\n\t\tthis.char_count += text.length;\n\n\t\t// Either get an allocation or send the committed text\n\t\tconst attrs = this.model.attributes;\n\t\tif (!attrs.num && !attrs.sentAllocRequest) {\n\t\t\tmain.send([common.INSERT_POST, this.allocationMessage(text, null)]);\n\t\t\tthis.model.set({sentAllocRequest: true});\n\t\t}\n\t\telse if (attrs.num)\n\t\t\tmain.send(text);\n\t\telse\n\t\t\tthis.pending += text;\n\n\t\t// Add it to the user's display\n\t\tif (lines) {\n\t\t\tlines[0] = this.$lineBuffer.text() + lines[0];\n\t\t\tthis.$lineBuffer.text(lines.pop());\n\t\t\tfor (let o = 0, len = lines.length; o < len; o++)\n\t\t\t\tthis.imouto.fragment(lines[o] + '\\n');\n\t\t}\n\t\telse {\n\t\t\tthis.$lineBuffer.append(document.createTextNode(text));\n\t\t\tthis.$lineBuffer[0].normalize();\n\t\t}\n\t},\n\t// Construct the message for post allocation in the database\n\tallocationMessage(text, image) {\n\t\tvar msg = {nonce: main.request('nonce:create')};\n\n\t\tfunction opt(key, val) {\n\t\t\tif (val)\n\t\t\t\tmsg[key] = val;\n\t\t}\n\n\t\topt('name', main.$name.val().trim());\n\t\topt('email', main.$email.val().trim());\n\t\topt('subject', this.$subject.val().trim());\n\t\topt('frag', text);\n\t\topt('image', image);\n\t\topt('op', this.model.get('op'));\n\n\t\treturn msg;\n\t},\n\tonKeyDown(event) {\n\t\tmain.follow(() => {\n\t\t\tswitch(event.which) {\n\t\t\t\tcase 13:\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t// fall-through\n\t\t\t\tcase 32:\n\t\t\t\t\t// predict result\n\t\t\t\t\tvar input = this.$input[0];\n\t\t\t\t\tvar val = this.$input.val();\n\t\t\t\t\tval = val.slice(0, input.selectionStart)\n\t\t\t\t\t\t+ (event.which == 13 ? '\\n' : ' ')\n\t\t\t\t\t\t+ val.slice(input.selectionEnd);\n\t\t\t\t\tthis.onInput(val);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\thandle_shortcut.bind(this)(event);\n\t\t\t}\n\t\t});\n\t},\n\tfinish() {\n\t\tif (this.model.get('num')) {\n\t\t\tthis.flushPending();\n\t\t\tthis.commit(this.$input.val());\n\t\t\tthis.$input.remove();\n\t\t\tthis.$submit.remove();\n\t\t\tif (this.$uploadForm)\n\t\t\t\tthis.$uploadForm.remove();\n\t\t\tif (this.$iframe) {\n\t\t\t\tthis.$iframe.remove();\n\t\t\t\tthis.$iframe = null;\n\t\t\t}\n\t\t\tthis.imouto.fragment(this.$lineBuffer.text());\n\t\t\tthis.$buffer.replaceWith(this.$buffer.contents());\n\t\t\tthis.$lineBuffer.remove();\n\t\t\tthis.$blockquote.css({\n\t\t\t\t'margin-left': '', 'padding-left': ''\n\t\t\t}\n\t\t\t);\n\t\t\tmain.send([common.FINISH_POST]);\n\t\t\tthis.preserve = true;\n\t\t\tif (this.isThread)\n\t\t\t\tthis.$el.append(main.oneeSama.replyBox());\n\n\t\t\tlet missing = this.imouto.allRolls.sent - this.imouto.allRolls.seen;\n\t\t\t//if missing>0 we have to wait until insertOwnPosts \"sees\" the\n\t\t\t// dice\n\t\t\tif (missing > 0) {\n\t\t\t\tlet checkAgain;\n\t\t\t\t(checkAgain= (n) => {\n\t\t\t\t\tsetTimeout(()=> {\n\t\t\t\t\t\tif (this.imouto.allRolls.seen == this.imouto.allRolls.sent || n ==0)\n\t\t\t\t\t\t\tpostSM.feed('done');\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tcheckAgain(n - 1);\n\t\t\t\t\t}, 100);\n\t\t\t\t})(5); //retry 5 times\n\t\t\t}\n\t\t\telse\n\t\t\t\tpostSM.feed('done');\n\t\t}else\n\t\t\tpostSM.feed('done');\n\t},\n\t// Send any unstaged words\n\tflushPending() {\n\t\tif (this.pending) {\n\t\t\tmain.send(this.pending);\n\t\t\tthis.pending = '';\n\t\t}\n\t},\n\tonToggle(event) {\n\t\tconst attrs = this.model.attributes;\n\t\tif (attrs.uploading || attrs.uploaded)\n\t\t\treturn;\n\t\tevent.preventDefault();\n\t\tevent.stopImmediatePropagation();\n\t\tif (attrs.spoiler) {\n\t\t\tthis.model.set({spoiler: 0});\n\t\t\treturn;\n\t\t}\n\t\tconst pick = common.pick_spoiler(attrs.nextSpoiler);\n\t\tthis.model.set({\n\t\t\tspoiler: pick.index,\n\t\t\tnextSpoiler: pick.next\n\t\t});\n\t},\n\tonAllocation(msg) {\n\t\tconst num = msg.num;\n\t\tstate.ownPosts[num] = num;\n\t\tthis.model.set({num: num});\n\t\tthis.flushPending();\n\t\tvar header = $(main.oneeSama.header(msg));\n\t\tthis.$meta.replaceWith(header);\n\t\tthis.$meta = header;\n\t\tif (!this.isThread)\n\t\t\tthis.$el.addClass('editing');\n\n\t\t/*\n\t\t TODO: Hide threads that are over THREADS_PER_PAGE. Also would need to be\n\t\t removed from syncs client and server-side. Hmm.\n\t\t */\n\n\t\tthis.$el.attr('id', 'p' + num);\n\n\t\tif (msg.image)\n\t\t\tthis.insertUploaded(msg.image);\n\n\t\tif (this.$uploadForm)\n\t\t\tthis.$uploadForm.append(this.$submit);\n\t\telse\n\t\t\tthis.$blockquote.after(this.$submit);\n\t\tif (this.isThread) {\n\t\t\tthis.$subject.siblings('label').andSelf().remove();\n\t\t\tthis.$blockquote.show();\n\t\t\tthis.resizeInput();\n\t\t\tthis.$input.focus();\n\t\t}\n\n\t\t/*\n\t\t Ensures you are nagged at by the browser, when navigating away from an\n\t\t unfinished allocated post.\n\t\t */\n\t\twindow.onbeforeunload = function() {\n\t\t\treturn \"You have an unfinished post.\";\n\t\t};\n\t},\n\t// Insert an image that has been uploaded and processed by the server\n\tinsertUploaded(info) {\n\t\tthis.renderImage(null, info);\n\t\tthis.$imageInput\n\t\t\t.siblings('strong')\n\t\t\t.andSelf()\n\t\t\t.remove();\n\t\tthis.$cancel.remove();\n\t\tthis.$uploadForm.find('#toggle').remove();\n\t\tthis.flushPending();\n\t\tthis.model.set({\n\t\t\tuploading: false,\n\t\t\tuploaded: true,\n\t\t\tsentAllocRequest: true\n\t\t});\n\n\t\t// Stop obnoxious wrap-around-image behaviour\n\t\tvar $img = this.$el.find('img');\n\t\tthis.$blockquote.css({\n\t\t\t'margin-left': $img.css('margin-right'),\n\t\t\t'padding-left': $img.width()\n\t\t});\n\n\t\tthis.resizeInput();\n\t},\n\t// Handle image upload status\n\tdispatch(msg) {\n\t\tconst a = msg.arg;\n\t\tswitch(msg.t) {\n\t\t\tcase 'alloc':\n\t\t\t\tthis.onImageAllocation(a);\n\t\t\t\tbreak;\n\t\t\tcase 'error':\n\t\t\t\tthis.uploadError(a);\n\t\t\t\tbreak;\n\t\t\tcase 'status':\n\t\t\t\tthis.uploadStatus(a);\n\t\t\t\tbreak;\n\t\t}\n\t},\n\tonImageAllocation(msg) {\n\t\tconst attrs = this.model.attributes;\n\t\tif (attrs.cancelled)\n\t\t\treturn;\n\t\tif (!attrs.num && !attrs.sentAllocRequest) {\n\t\t\tmain.send([common.INSERT_POST, this.allocationMessage(null, msg)]);\n\t\t\tthis.model.set({sentAllocRequest: true});\n\t\t}\n\t\telse\n\t\t\tmain.send([common.INSERT_IMAGE, msg]);\n\t},\n\tuploadError(msg) {\n\t\tif (this.model.get('cancelled'))\n\t\t\treturn;\n\t\tthis.model.set({\n\t\t\tuploadStatus: msg,\n\t\t\tuploading: false\n\t\t});\n\t\tif (this.$uploadForm)\n\t\t\tthis.$uploadForm.find('input[name=alloc]').remove();\n\t},\n\tuploadStatus(msg) {\n\t\tif (this.model.get('cancelled'))\n\t\t\treturn;\n\t\tthis.model.set('uploadStatus', msg);\n\t},\n\taddReference(num, sel) {\n\t\t// If a >>link exists, put this one on the next line\n\t\tvar val = this.$input.val();\n\t\tif (/^>>\\d+$/.test(val)) {\n\t\t\tthis.$input.val(val + '\\n');\n\t\t\tthis.onInput();\n\t\t\tval = this.$input.val();\n\t\t}\n\t\t// Quote selected text automatically\n\t\tif (sel) {\n\t\t\tsel = sel.split('\\n');\n\t\t\t// Prepend > to each line\n\t\t\tfor (let i = 0, len = sel.length; i < len; i++)\n\t\t\t\tsel[i] = '>' + sel[i];\n\t\t\tnum += '\\n' + sel.join('\\n') + '\\n';\n\t\t}\n\t\tthis.$input.val(val + '>>' + num);\n\t\tthis.$input[0].selectionStart = this.$input.val().length;\n\t\tthis.onInput();\n\t\tthis.$input.focus();\n\t},\n\tremove() {\n\t\tif (!this.preserve) {\n\t\t\tif (this.isThread)\n\t\t\t\tthis.$el.next('hr').remove();\n\t\t\tthis.$el.remove();\n\t\t}\n\t\tthis.$sizer.remove();\n\t\tif (this.$iframe) {\n\t\t\tthis.$iframe.remove();\n\t\t\tthis.$iframe = null;\n\t\t}\n\t\tthis.stopListening();\n\t\twindow.onbeforeunload = null;\n\t},\n\t// Extend with imager.js methods\n\trenderImage: imager.Hidamari.renderImage,\n\t// Overrides automatic image expansion, if any\n\tautoExpandImage() {\n\t\treturn this;\n\t},\n\tfun() {\n\t\t\n\t}\n});\nexports.ComposerView = ComposerView;\n\nfunction openPostBox(num) {\n\tpostSM.feed('new', document.query(`#p${num} aside.posting`));\n}\nmain.reply('openPostBox', openPostBox);\n\nwindow.addEventListener('message', function(event) {\n\tconst msg = event.data;\n\tif (msg !== 'OK' && postForm)\n\t\tpostForm.uploadError(msg);\n}, false);\n\nmain.$threads.on('click', 'a.quote', function(e) {\n\te.preventDefault();\n\n\t// TODO: Set highlighted post\n\n\t/*\n\t Make sure the selection both starts and ends in the quoted post's\n\t blockquote\n\t */\n\tconst post = e.target.closest('article, section'),\n\t\tgsel = getSelection(),\n\t\tnum = util.getNum(post);\n\n\tfunction isInside(prop) {\n\t\tconst el = gsel[prop] && gsel[prop].parentElement;\n\t\treturn  el\n\t\t\t&& el.closest('blockquote')\n\t\t\t&& el.closest('article, section') === post;\n\t}\n\n\tlet sel;\n\tif (isInside('baseNode') && isInside('focusNode'))\n\t\tsel = gsel.toString();\n\topenPostBox(util.getNum(post.closest('section')));\n\tpostForm.addReference(num, sel);\n});\n"],"sourceRoot":"/source/"}