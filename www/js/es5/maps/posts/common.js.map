{"version":3,"sources":["posts/common.js"],"names":["System","register","_export","_context","main","imager","_","Backbone","common","util","lang","oneeSama","options","state","setters","execute","require","module","exports","Hidamari","extend","className","initialize","this","listenTo","model","redirect","clientInit","get","anonymise","command","_len","arguments","length","args","Array","_key","apply","updateBody","frag","blockquote","el","query","attributes","innerHTML","setModel","body","renderTime","outerHTML","time","renderBacklinks","links","backlinks","fun","anon","renderName","name","renderModerationInfo","info","getContainer","remove","before","parseDOM","modInfo","renderBan","after","banned","renderEditing","editing","classList","add","normalize"],"mappings":"AAAA,YAAaA,QAAOC,YAAY,SAASC,EAAQC,GAAU,GAAIC,GAAKC,EAAOC,EAAEC,EAASC,EAAOC,EAAKC,EAAKC,EAASC,EAAQC,CAAM,QAAQC,WAAWC,QAAQ,WAAWX,EAAKY,QAAQ,WAAWX,EAAOW,QAAQ,YAAYV,EAAEF,EAAKE,EAAEC,EAASH,EAAKG,SAASC,EAAOJ,EAAKI,OAAOC,EAAKL,EAAKK,KAAKC,EAAKN,EAAKM,KAAKC,EAASP,EAAKO,SAASC,EAAQR,EAAKQ,QAAQC,EAAMT,EAAKS,MAAMI,OAAOC,QAAQb,EAAOc,SAASC,QAAQC,UAAU,QAAQC,WAAW,WAAsBC,KAAKC,SAASD,KAAKE,MAAM,WAAWF,KAAKG,WAAYC,WAAW,WAAmE,MAA1Cf,GAAQgB,IAAI,cAAaL,KAAKM,YAAmBN,MAAOG,SAAS,SAAkBI,GAAS,IAAI,GAAIC,GAAKC,UAAUC,OAqBrnBC,EAAAC,MAAAJ,EAAA,EAAAA,EAAA,EAAA,GAAAK,EAAA,EAAAL,EAAAK,EAAAA,IAAAF,EAAAE,EAAA,GAAAJ,UAAAI,EAAAb,MAAAO,GAAAO,MAAAd,KAAAW,IAAAI,WAAA,SAAAC,GAAAhB,KAAAiB,aAAAjB,KAAAiB,WAAAjB,KAAAkB,GAAAC,MAAA,cAAA,IAAAjB,GAAAF,KAAAE,MAAAkB,UAAApB,MAAAiB,WAAAI,UAAAjC,EAAAkC,SAAApB,GAAAqB,KAAArB,EAAAqB,OAAAC,WAAA,WAAAxB,KAAAkB,GAAAC,MAAA,QAAAM,UAAArC,EAAAsC,KAAA1B,KAAAE,MAAAG,IAAA,UAAAsB,gBAAA,SAAAC,GAAA5B,KAAAkB,GAAAC,MAAA,SAAAE,UAAAjC,EAAAyC,UAAAD,IAAAE,IAAA,aAAAxB,UAAA,WAAAN,KAAAkB,GAAAC,MAAA,SAAAE,UAAA,mBAAAlC,EAAA4C,KAAA,OAAAC,WAAA,WAAAhC,KAAAkB,GAAAC,MAAA,SAAAM,UAAArC,EAAA6C,KAAAjC,KAAAE,MAAAkB,aAAAc,qBAAA,SAAAC,GAAA,GAAAjB,GAAAlB,KAAAoC,cAAAlB,GAAAC,MAAA,WAAAkB,SAAAnB,EAAAC,MAAA,cAAAmB,OAAApD,EAAAqD,SAAAnD,EAAAoD,QAAAL,MAAAC,aAAA,WAAA,MAAApC,MAAAkB,GAAAC,MAAA,eAAAsB,UAAA,WAAA,GAAAvB,GAAAlB,KAAAoC,cAAAlB,GAAAC,MAAA,eAAAkB,SAAAnB,EAAAC,MAAA,cAAAuB,MAAAxD,EAAAqD,SAAAnD,EAAAuD,YAAAC,cAAA,SAAAC,GAAA,GAAA3B,GAAAlB,KAAAkB,EAAA2B,GAAA3B,EAAA4B,UAAAC,IAAA,YAAA7B,EAAA4B,UAAAT,OAAA,WAAAnB,EAAAC,MAAA,cAAA6B","file":"posts/common.js","sourcesContent":["/*\n * Common methods to both OP and regular posts\n */\n\nconst main = require('../main'),\n\timager = require('./imager'),\n\t{_, Backbone, common, util, lang, oneeSama, options, state} = main;\n\nmodule.exports = imager.Hidamari.extend({\n\tclassName: 'glass',\n\t// One-way communication channel to the model\n\tinitialize() {\n\t\tthis.listenTo(this.model, 'dispatch', this.redirect);\n\t},\n\t// Extra initialisation logic for posts renderred client-side\n\tclientInit() {\n\t\tif (options.get('anonymise'))\n\t\t\tthis.anonymise();\n\t\treturn this;\n\t},\n\t// Proxy to the appropriate method\n\tredirect(command, ...args) {\n\t\tthis[command](...args);\n\t},\n\t// Update the post's text body\n\tupdateBody(frag) {\n\t\tif (!this.blockquote)\n\t\t\tthis.blockquote = this.el.query('blockquote');\n\n\t\t// This will rerender the HTML content on each update. Might be\n\t\t// some overhead involved, but simplifies live updates greatly.\n\t\tconst model = this.model.attributes;\n\t\tthis.blockquote.innerHTML = oneeSama.setModel(model).body(model.body);\n\t},\n\trenderTime() {\n\t\tthis.el.query('time').outerHTML = oneeSama.time(this.model.get('time'));\n\t},\n\trenderBacklinks(links) {\n\t\tthis.el.query('small').innerHTML = oneeSama.backlinks(links);\n\t},\n\t// Admin JS injections\n\tfun() {\n\t\t// Fun goes here\n\t},\n\t// Self-delusion tripfag filter\n\tanonymise() {\n\t\tthis.el.query('.name').innerHTML = `<b class=\"name\">${lang.anon}<b>`;\n\t},\n\t// Restore regular name\n\trenderName() {\n\t\tthis.el.query('.name').outerHTML = oneeSama.name(this.model.attributes);\n\t},\n\trenderModerationInfo(info) {\n\t\tconst el = this.getContainer();\n\t\tel.query('.modLog').remove();\n\t\tel.query('blockquote').before(util.parseDOM(oneeSama.modInfo(info)));\n\t},\n\tgetContainer() {\n\t\treturn this.el.query('.container');\n\t},\n\trenderBan() {\n\t\tconst el = this.getContainer();\n\t\tel.query('.banMessage').remove();\n\t\tel.query('blockquote').after(util.parseDOM(oneeSama.banned()));\n\t},\n\trenderEditing(editing) {\n\t\tconst {el} = this;\n\t\tif (editing)\n\t\t\tel.classList.add('editing');\n\t\telse {\n\t\t\tel.classList.remove('editing');\n\t\t\tel.query('blockquote').normalize();\n\t\t}\n\t}\n});\n"],"sourceRoot":"/source/"}