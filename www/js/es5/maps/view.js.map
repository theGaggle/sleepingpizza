{"version":3,"sources":["view.js"],"names":["System","register","_export","_context","_classCallCheck","instance","Constructor","TypeError","Model","extend","_createClass","View","setters","_model","_underscore","execute","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","args","this","model","attach","el","document","createElement","tag","_arr","_i","setAttribute","value","remove","detach","type","selector","fn","addEventListener","event","matches","events","on","_this","removeEventListener","_this2"],"mappings":"AAAA,YAAaA,QAAOC,UAAU,UAAU,cAAc,SAASC,EAAQC,GAA6C,QAASC,GAAgBC,EAASC,GAAa,KAAKD,YAAoBC,IAAc,KAAM,IAAIC,WAAU,qCAA7I,GAAIC,GAAMC,EAAOC,EAAaC,CAAsJ,QAAQC,SAAS,SAASC,GAAQL,EAAMK,EAAAA,YAAiB,SAASC,GAAaL,EAAOK,EAAYL,SAAUM,QAAQ,WAAWL,EAAa,WAAW,QAASM,GAAiBC,EAAOC,GAAO,IAAI,GAAIC,GAAE,EAAEA,EAAED,EAAME,OAAOD,IAAI,CAAC,GAAIE,GAAWH,EAAMC,EAAGE,GAAWC,WAAWD,EAAWC,aAAY,EAAMD,EAAWE,cAAa,EAAQ,SAAWF,KAAWA,EAAWG,UAAS,GAAKC,OAAOC,eAAeT,EAAOI,EAAWM,IAAIN,IAAc,MAAO,UAASf,EAAYsB,EAAWC,GAAuI,MAAvHD,IAAWZ,EAAiBV,EAAYwB,UAAUF,GAAeC,GAAYb,EAAiBV,EAAYuB,GAAoBvB,MAAkBK,EAAK,WAAW,QAASA,GAAKoB,GAAmH,GAA7G3B,EAAgB4B,KAAKrB,GAAMF,EAAOuB,KAAKD,GAAUC,KAAKC,QAAOD,KAAKC,MAAM,GAAIzB,IAASwB,KAAKC,MAAMC,OAAOF,OAAUA,KAAKG,GAAmF,IAAI,GAA/EA,GAAGH,KAAKG,GAAGC,SAASC,cAAcL,KAAKM,KAAK,OAAWC,GAAM,KAAK,SAAiBC,EAAG,EAAEA,EAAGD,EAAKnB,OAAOoB,IAoBpmC,CAA5B,GAAIb,GAAAY,EAAAC,EACJb,KAAOI,IACVI,EAAGM,aAAad,EAAKI,EAAKJ,KAD3B,MAAAjB,GAAAC,IAAAgB,IAAA,SAAAe,MAAA,WAAAV,KAAAG,GAAAQ,SAAAX,KAAAC,MAAAW,OAAAZ,YAAAA,MAAAC,SAAAN,IAAA,KAAAe,MAAA,SAAAG,EAAAC,EAAAC,GAAAf,KAAAG,GAAAa,iBAAAH,EAAA,SAAAI,GAAAA,EAAAhC,OAAAiC,SAAAD,EAAAhC,OAAAiC,QAAAJ,IAAAC,EAAAE,QAAAtB,IAAA,UAAAe,MAAA,SAAAS,GAAA,IAAA,GAAAL,KAAAK,GAAAnB,KAAAoB,GAAA,QAAAN,EAAAK,EAAAL,OAAAnB,IAAA,QAAAe,MAAA,SAAAG,EAAAE,GAAAf,KAAAG,GAAAa,iBAAAH,EAAAE,MAAApB,IAAA,OAAAe,MAAA,SAAAG,EAAAC,EAAAC,GAAA,GAAAM,GAAArB,IAAAA,MAAAG,GAAAa,iBAAAH,EAAA,SAAAI,GAAAA,EAAAhC,OAAAiC,SAAAD,EAAAhC,OAAAiC,QAAAJ,KAAAC,EAAAE,GAAAI,EAAAlB,GAAAmB,oBAAAT,EAAAE,SAAApB,IAAA,UAAAe,MAAA,SAAAG,EAAAE,GAAA,GAAAQ,GAAAvB,IAAAA,MAAAG,GAAAa,iBAAAH,EAAA,SAAAI,GAAAF,EAAAE,GAAAM,EAAApB,GAAAmB,oBAAAT,EAAAE,SAAApC,KAAAT,EAAA,UAAAS","file":"view.js","sourcesContent":["import Model from './model'\nimport {extend} from 'underscore'\n\n// Generic view class, that all over view classes extend\nexport default class View {\n\t// Creates a new View and binds it to the target model. If none, creates a\n\t// blank model. If no element suplied, creates a new one from tags. Sets\n\t// some other default variables.\n\tconstructor(args) {\n\t\textend(this, args)\n\t\tif (!this.model) {\n\t\t\tthis.model = new Model()\n\t\t}\n\t\tthis.model.attach(this)\n\n\t\t// Create element, if none\n\t\tif (!this.el) {\n\t\t\tconst el = this.el = document.createElement(this.tag || 'div')\n\n\t\t\t// Set element attributes, if any\n\t\t\tfor (let key of ['id', 'class']) {\n\t\t\t\tif (key in args) {\n\t\t\t\t\tel.setAttribute(key, args[key])\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove the element from the DOM and detach from its model, allowing the\n\t// View instance to be garbage collected.\n\tremove() {\n\t\tthis.el.remove()\n\t\tthis.model.detach(this)\n\t\tdelete this.model\n\t}\n\n\t// Add selector-specific event listeners to the view\n\ton(type, selector, fn) {\n\t\tthis.el.addEventListener(type, event => {\n\t\t\tif (event.target.matches && event.target.matches(selector)) {\n\t\t\t\tfn(event)\n\t\t\t}\n\t\t})\n\t}\n\n\t// Shorthand for adding multiple click event listeners as an object.\n\t// We use those the most, so nice to have.\n\tonClick(events) {\n\t\tfor (let selector in events) {\n\t\t\tthis.on('click', selector, events[selector])\n\t\t}\n\t}\n\n\t// Add event listener to view's element, whithout filtering by selector\n\tonAll(type, fn) {\n\t\tthis.el.addEventListener(type, fn)\n\t}\n\n\t// Add selector-specific event listener, that will execute only once\n\tonce(type, selector, fn) {\n\t\tthis.el.addEventListener(type, event => {\n\t\t\tif (event.target.matches && event.target.matches(selector)) {\n\t\t\t\tfn(event)\n\t\t\t\tthis.el.removeEventListener(type, fn)\n\t\t\t}\n\t\t})\n\t}\n\n\t// Add event listener, that will execute only once\n\tonceAll(type, fn) {\n\t\tthis.el.addEventListener(type, event => {\n\t\t\tfn(event)\n\t\t\tthis.el.removeEventListener(type, fn)\n\t\t})\n\t}\n}\n"],"sourceRoot":"/source/"}